import{t as e}from"../../../index-BgswASio.chunk.js";import{R as t,e as a,f as s,T as i,S as r,a as n,b as l,c as o,C as c,m as d,F as p,r as h,d as m,g as u,p as g,h as f,E as y,i as S,j as I,k as P,l as b,P as D,n as E,I as k,o as C,U as v,q as w,s as T,t as R,u as U,v as O,w as x,G as A,x as F,y as L,A as M,z as B,B as W,D as N,W as H,H as j,J as $,K as V,L as z,M as K,N as J,O as G,Q as q,V as _,X,Y as Q,Z,_ as Y,$ as ee}from"../../../detailed_results-DLxs8mbv.chunk.js";import{E as te,I as ae,g as se,a as ie,M as re,P as ne,b as le,c as oe,B as ce,d as de,e as pe,f as he,C as me,h as ue,i as ge,j as fe,S as ye,r as Se,p as Ie}from"../../../preset_utils-pCalmhXL.chunk.js";import{B as Pe}from"../../../sim-D4sU7LOU.chunk.js";import{F as be}from"../../../sim-C92XE49b.chunk.js";import{U as De}from"../../../sim-BgzHwNn2.chunk.js";import{B as Ee}from"../../../sim-KgoUeYgw.chunk.js";import{F as ke}from"../../../sim-B-aQ60fw.chunk.js";import{G as Ce}from"../../../sim-ijxGUhV2.chunk.js";import{R as ve}from"../../../sim-DHtKRzRg.chunk.js";import{B as we}from"../../../sim-DaOIL7AS.chunk.js";import{M as Te}from"../../../sim-C9YjsG37.chunk.js";import{S as Re}from"../../../sim-AUOHCi7b.chunk.js";import{A as Ue}from"../../../sim-PxKdrVZ9.chunk.js";import{F as Oe}from"../../../sim-Cfhzgbcw.chunk.js";import{F as xe}from"../../../sim-uzb5Elvs.chunk.js";import{H as Ae}from"../../../sim-BjTPI99n.chunk.js";import{P as Fe}from"../../../sim-D91sy5cE.chunk.js";import{R as Le}from"../../../sim-Cb8oxCd7.chunk.js";import{D as Me}from"../../../sim-G6RT_zl0.chunk.js";import{H as Be}from"../../../sim-DWwFcZ8b.chunk.js";import{S as We}from"../../../sim-MsfOHXY4.chunk.js";import{A as Ne}from"../../../sim-BYY6jtlL.chunk.js";import{C as He}from"../../../sim-DrQlvZ4V.chunk.js";import{S as je}from"../../../sim-CCdEfHjy.chunk.js";import{E as $e}from"../../../sim-CPQ7v9zd.chunk.js";import{E as Ve}from"../../../sim-BKCenWv3.chunk.js";import{R as ze}from"../../../sim-C483II3w.chunk.js";import{A as Ke}from"../../../sim-DHzVTjNk.chunk.js";import{D as Je}from"../../../sim-BkpJ4a-V.chunk.js";import{D as Ge}from"../../../sim-GaIra7rl.chunk.js";import{A as qe}from"../../../sim-jyGTzcg-.chunk.js";import{F as _e}from"../../../sim-CwOfRzP5.chunk.js";import{P as Xe}from"../../../sim-d8x4gbLv.chunk.js";import"../../../suggest_reforges_action-COs6tVdS.chunk.js";import"../../../inputs-NUCk39e3.chunk.js";import"../../../inputs-y5MSbpx2.chunk.js";import"../../../apl_utils-DJ8-kFwN.chunk.js";import"../../../shared-wqVBRmXi.chunk.js";import"../../../inputs-DzpgsBLS.chunk.js";import"../../../inputs-0dW4S6sj.chunk.js";import"../../../inputs-CMmU2dWP.chunk.js";import"../../../inputs-DILB9coj.chunk.js";import"../../../presets-BD_sFlJM.chunk.js";import"../../../inputs-Cj_iVoel.chunk.js";import"../../../p4_arms_item_swap.gear-BiwAwf-J.chunk.js";class Qe extends te{constructor(e,t,a){super(e,a),this.simUI=t}}class Ze extends Qe{constructor(e,t){super(e,t,{title:"JSON Export",allowDownload:!0})}getData(){return JSON.stringify(t.toJson(this.simUI.toProto()),null,2)}}class Ye extends ae{constructor(e,t,a){super(e,a),this.simUI=t}}class et extends Ye{constructor(e,t){super(e,t,{title:"JSON Import",allowFileUpload:!0}),this.descriptionElem.appendChild(a(s,null,a("p",null,"Import settings from a JSON text file, which can be created using the JSON Export feature of this site."),a("p",null,"To import, paste the JSON text below and click, 'Import'.")))}async onImport(e){const a=t.fromJsonString(e,{ignoreUnknownFields:!0});this.simUI.fromProto(i.nextEventID(),a),this.close()}}const tt={[r.SpecBloodDeathKnight]:(e,t)=>new Pe(e,t),[r.SpecFrostDeathKnight]:(e,t)=>new be(e,t),[r.SpecUnholyDeathKnight]:(e,t)=>new De(e,t),[r.SpecBalanceDruid]:(e,t)=>new Ee(e,t),[r.SpecFeralDruid]:(e,t)=>new ke(e,t),[r.SpecRestorationDruid]:(e,t)=>new ve(e,t),[r.SpecGuardianDruid]:(e,t)=>new Ce(e,t),[r.SpecBeastMasteryHunter]:(e,t)=>new we(e,t),[r.SpecMarksmanshipHunter]:(e,t)=>new Te(e,t),[r.SpecSurvivalHunter]:(e,t)=>new Re(e,t),[r.SpecArcaneMage]:(e,t)=>new Ue(e,t),[r.SpecFireMage]:(e,t)=>new Oe(e,t),[r.SpecFrostMage]:(e,t)=>new xe(e,t),[r.SpecHolyPaladin]:(e,t)=>new Ae(e,t),[r.SpecProtectionPaladin]:(e,t)=>new Fe(e,t),[r.SpecRetributionPaladin]:(e,t)=>new Le(e,t),[r.SpecDisciplinePriest]:(e,t)=>new Me(e,t),[r.SpecHolyPriest]:(e,t)=>new Be(e,t),[r.SpecShadowPriest]:(e,t)=>new We(e,t),[r.SpecAssassinationRogue]:(e,t)=>new Ne(e,t),[r.SpecCombatRogue]:(e,t)=>new He(e,t),[r.SpecSubtletyRogue]:(e,t)=>new je(e,t),[r.SpecElementalShaman]:(e,t)=>new $e(e,t),[r.SpecEnhancementShaman]:(e,t)=>new Ve(e,t),[r.SpecRestorationShaman]:(e,t)=>new ze(e,t),[r.SpecAfflictionWarlock]:(e,t)=>new Ke(e,t),[r.SpecDemonologyWarlock]:(e,t)=>new Je(e,t),[r.SpecDestructionWarlock]:(e,t)=>new Ge(e,t),[r.SpecArmsWarrior]:(e,t)=>new qe(e,t),[r.SpecFuryWarrior]:(e,t)=>new _e(e,t),[r.SpecProtectionWarrior]:(e,t)=>new Xe(e,t)},at=n.naturalOrder.map((e=>Object.values(e.specs))).flat().map((e=>se(e.specID))).map((e=>e.raidSimPresets)).flat(),st=[...new Set(at.map((e=>e.spec)))];class it{constructor(e,t,a){this.raidIndex=-1,this.inferredProfessions=[],this.playersInParty=[],this.simUI=t,this.data=e,this.name=e.name,this.id=e.id,this.type=e.type;const s=e.icon.split("-")[1];this.fullType=this.type+s,console.log(`WCL spec: ${this.fullType}`);const i=rt[this.fullType]??null;if(null==i)throw new Error("Player type not implemented: "+this.fullType);if(this.spec=i,this.player=new ne(D.fromProto(this.spec),t.sim),this.preset=it.getMatchingPreset(i,e.talents),void 0===this.preset)throw new Error("Could not find matching preset: "+JSON.stringify({name:this.name,type:this.fullType,talents:e.talents}).toString());this.player.applySharedDefaults(a),this.player.setTalentsString(a,this.preset.talents.talentsString),this.player.setGlyphs(a,this.preset.talents.glyphs),this.player.setConsumes(a,this.preset.consumables),this.player.setSpecOptions(a,this.preset.specOptions),this.player.setProfessions(a,[o.Engineering,o.Jewelcrafting]),this.player.setName(a,e.name),this.player.setGear(a,t.sim.db.lookupEquipmentSpec(E.create({items:e.gear.map((e=>k.create({id:e.id,enchant:e.permanentEnchant,gems:e.gems?e.gems.map((e=>e.id)):[]})))})))}static getMatchingPreset(e,t){const a=at.filter((t=>t.spec==e));let s=0;if(a&&a.length>1){let e=999;a.forEach(((a,i)=>{const r=C(a.talents.talentsString),n=r.reduce(((e,a,s)=>e+Math.abs(t[s]?.guid-r[s])),0);n<e&&(s=i,e=n)}))}return a[s]}toUnitReference(){return v.create({type:w.Player,index:this.raidIndex})}addPlayerInParty(e){return e!=this&&!this.playersInParty.includes(e)&&(this.playersInParty.push(e),!0)}}const rt={DeathKnightBlood:r.SpecBloodDeathKnight,DeathKnightFrost:r.SpecFrostDeathKnight,DeathKnightUnholy:r.SpecUnholyDeathKnight,DruidBalance:r.SpecBalanceDruid,DruidFeral:r.SpecFeralDruid,DruidRestoration:r.SpecRestorationDruid,HunterBeastMastery:r.SpecBeastMasteryHunter,HunterMarksmanship:r.SpecMarksmanshipHunter,HunterSurvival:r.SpecSurvivalHunter,MageArcane:r.SpecArcaneMage,MageFire:r.SpecFireMage,MageFrost:r.SpecFrostMage,PaladinHoly:r.SpecHolyPaladin,PaladinJusticar:r.SpecProtectionPaladin,PaladinProtection:r.SpecProtectionPaladin,PaladinRetribution:r.SpecRetributionPaladin,PriestHoly:r.SpecHolyPriest,PriestDiscipline:r.SpecDisciplinePriest,PriestShadow:r.SpecShadowPriest,RogueAssassination:r.SpecAssassinationRogue,RogueCombat:r.SpecCombatRogue,RogueSubtlety:r.SpecSubtletyRogue,ShamanElemental:r.SpecElementalShaman,ShamanEnhancement:r.SpecEnhancementShaman,ShamanRestoration:r.SpecRestorationShaman,WarlockDestruction:r.SpecDestructionWarlock,WarlockAffliction:r.SpecAfflictionWarlock,WarlockDemonology:r.SpecDemonologyWarlock,WarriorArms:r.SpecArmsWarrior,WarriorFury:r.SpecFuryWarrior,WarriorProtection:r.SpecProtectionWarrior},nt=[{id:25046,name:"Arcane Torrent (Energy)",race:l.RaceBloodElf},{id:28730,name:"Arcane Torrent (Mana)",race:l.RaceBloodElf},{id:50613,name:"Arcane Torrent (Runic Power)",race:l.RaceBloodElf},{id:26297,name:"Berserking",race:l.RaceTroll},{id:20572,name:"Blood Fury (AP)",race:l.RaceOrc},{id:33697,name:"Blood Fury (AP+SP)",race:l.RaceOrc},{id:33702,name:"Blood Fury (SP)",race:l.RaceOrc},{id:20589,name:"Escape Artist",race:l.RaceGnome},{id:20594,name:"Stoneform",race:l.RaceDwarf},{id:20549,name:"War Stomp",race:l.RaceTauren},{id:7744,name:"Will of the Forsaken",race:l.RaceUndead},{id:59752,name:"Will to Survive",race:l.RaceHuman}],lt=[{id:55503,name:"Lifeblood",profession:o.Herbalism},{id:50305,name:"Skinning",profession:o.Skinning}],ot=[{id:29166,name:"Innervate",class:c.ClassDruid,applyFunc:(e,t)=>{const a=e.getSpecOptions();return a.classOptions.innervateTarget=t,a}},{id:10060,name:"Power Infusion",class:c.ClassPriest,applyFunc:(e,t)=>{const a=e.getSpecOptions();return a.powerInfusionTarget=t,a}},{id:57933,name:"Tricks of the Trade",class:c.ClassRogue,applyFunc:(e,t)=>{const a=e.getSpecOptions();return a.classOptions.tricksOfTheTradeTarget=t,a}},{id:49016,name:"Unholy Frenzy",class:c.ClassDeathKnight,applyFunc:(e,t)=>{const a=e.getSpecOptions();return a.unholyFrenzyTarget=t,a}}],ct=[{id:52042,name:"Healing Stream Totem"},{id:48076,name:"Holy Nova"},{id:48445,name:"Tranquility"},{id:15290,name:"Vampiric Embrace"}],dt=[{id:48072,name:"Prayer of Healing"}];class pt extends Ye{constructor(e,t){super(e,t,{title:"WCL Import",allowFileUpload:!1}),this.queryCounter=0,this.token="",this.textElem.classList.add("small-textarea"),this.descriptionElem.appendChild(a(s,null,a("p",null,"Imports the entire raid from a WCL report."),a("p",null,"To import, paste the WCL report and fight link (https://classic.warcraftlogs.com/reports/REPORTID#fight=FIGHTID).",a("br",null),"Include the fight ID or else the first fight in the report will be used."),a("p",null,"The following are imported directly from the report:",a("ul",null,a("li",null,"Player Name"),a("li",null,"Equipment (items, enchants, and gems)"),a("li",null,"Faction (Alliance / Horde)"),a("li",null,"Encounter: If the import link has a fight ID we try to match with a preset Encounter. Note that many Encounters are still unimplemented.")),"The following are not available directly from the report data, but we try to infer them:",a("ul",null,a("li",null,"Talents: Log data only gives us the tree summary (e.g. '51/20/0') so we match this with the closest preset talent build."),a("li",null,"Glyphs: Glyphs are absent from log data, but we pair them with the inferred Talents."),a("li",null,"Race: Inferred from Race-specific abilties used in any fight if possible, or defaults to Spec-specific Race."),a("li",null,"Professions: Inferred from profession-locked items/enchants/gems."),a("li",null,"Buff assignments (Innervate, Unholy Frenzy, etc): Inferred from casts."),a("li",null,"Party Composition: Inferred from party-only effects, such as Prayer of Healing, or Vampiric Touch.")),"The following are not imported, and instead use spec-specific defaults:",a("ul",null,a("li",null,"Rotation / Spec-specific options"),a("li",null,"Consumes"),a("li",null,"Paladin Blessings")))))}async getWCLBearerToken(){if(""==this.token){const e=await fetch("https://classic.warcraftlogs.com/oauth/token",{method:"POST",headers:{Authorization:"Basic "+btoa("963d31c8-7efa-4dde-87cf-1b254a8a2f8c:lRJVhujEEnF96xfUoxVHSpnqKN9v8bTqGEjutsO3")},body:new URLSearchParams({grant_type:"client_credentials"})}),t=await e.json();this.token=t.access_token}return this.token}async queryWCL(e){const t={"Content-Type":"application/json",Authorization:`Bearer ${await this.getWCLBearerToken()}`,Accept:"application/json"},a=`https://classic.warcraftlogs.com/api/v2/client?query=${e}`;this.queryCounter++;const s=await fetch(encodeURI(a),{method:"GET",headers:t}),i=await s.json();if(i?.errors?.length){const t=i.errors.map((e=>e.message)).join("\n");throw new Error(`GraphQL error: ${t}\n\nQuery: ${e}`)}return console.debug(`WCL query: ${e}\n\nResult: ${JSON.stringify(i)}`),i}async parseURL(e){const t=e.match(/classic\.warcraftlogs\.com\/reports\/([a-zA-Z0-9:]+)\/?(#.*fight=((\d+)|(last)))?/);if(!t)throw new Error(`Invalid WCL URL ${e}, must look like "classic.warcraftlogs.com/reports/XXXX"`);const a={reportID:t[1],fightID:""};if(t[2]&&t[3]&&"last"!=t[3])a.fightID=t[3];else{const e=`{\n\t\t\t\treportData {\n\t\t\t\t\treport(code: "${a.reportID}") {\n\t\t\t\t\t\tfights(killType: Kills, translate: true) {\n\t\t\t\t\t\t\tid, name\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}`,s=(await this.queryWCL(e)).data.reportData.report.fights;"last"==t[3]?a.fightID=String(s[s.length-1].id):a.fightID=String(s[0].id)}return console.debug(`Importing WCL report: ${JSON.stringify(a)}`),a}async getRateLimit(){return(await this.queryWCL("{\n\t\trateLimitData {\n\t\t  limitPerHour, pointsSpentThisHour, pointsResetIn\n\t\t}\n\t  }")).data.rateLimitData}async onImport(e){this.importButton.disabled=!0,this.rootElem.style.cursor="wait";try{await this.doImport(e)}catch(t){console.error(t),alert("Failed import from WCL: "+t)}this.importButton.disabled=!1,this.rootElem.style.removeProperty("cursor")}async doImport(e){if(!e.length)throw new Error("No import link provided!");const a=await this.parseURL(e);await this.getRateLimit();const s=`{\n\t\t\treportData {\n\t\t\t\treport(code: "${a.reportID}") {\n\t\t\t\t\tguild {\n\t\t\t\t\t\tname faction {id}\n\t\t\t\t\t}\n\t\t\t\t\tplayerDetails: table(fightIDs: [${a.fightID}], dataType: Casts, killType: All, viewBy: Default)\n\t\t\t\t\tcombatantInfoEvents: events(fightIDs: [${a.fightID}], dataType:CombatantInfo, limit: 50) { data }\n\t\t\t\t\tfights(fightIDs: [${a.fightID}]) {\n\t\t\t\t\t\tstartTime, endTime, id, name\n\t\t\t\t\t}\n\n\t\t\t\t\treportCastEvents: events(dataType:Casts, endTime: 99999999, filterExpression: "${[nt,lt].flat().map((e=>e.id)).map((e=>`ability.id = ${e}`)).join(" OR ")}", limit: 10000) { data }\n\n\t\t\t\t\tfightCastEvents: events(fightIDs: [${a.fightID}], dataType:Casts, filterExpression: "${[ot].flat().map((e=>e.id)).map((e=>`ability.id = ${e}`)).join(" OR ")}", limit: 10000) { data }\n\n\t\t\t\t\tfightHealEvents: events(fightIDs: [${a.fightID}], dataType:Healing, filterExpression: "${[ct,dt].flat().map((e=>e.id)).map((e=>`ability.id = ${e}`)).join(" OR ")}", limit: 10000) { data }\n\n\t\t\t\t\tmanaTideTotem: events(fightIDs: [${a.fightID}], dataType:Resources, filterExpression: "ability.id = 39609", limit: 100) { data }\n\t\t\t\t}\n\t\t\t}\n\t\t}`,r=(await this.queryWCL(s)).data.reportData.report,n=r.playerDetails.data.entries;i.freezeAllAndDo((()=>{const e=i.nextEventID(),a=n.map((t=>new it(t,this.simUI,e)));this.inferRace(e,r,a),this.inferProfessions(e,r,a),this.inferAssignments(e,r,a),this.inferPartyComposition(e,r,a);const s=a.filter((e=>e.player.getClass()==c.ClassPaladin)).length,l=t.create({encounter:this.getEncounterProto(r),raid:this.getRaidProto(a),blessings:d(s)});this.simUI.clearRaid(e),this.simUI.fromProto(e,l)})),this.close()}inferRace(e,t,a){a.forEach((t=>t.player.setRace(e,l.RaceUnknown)));let s=t.guild?.faction?.id||this.simUI.raidPicker?.getCurrentFaction()||p.Horde;t.combatantInfoEvents.data.forEach((t=>{t.auras.filter((e=>28878==e.ability)).forEach((t=>{const i=a.find((e=>e.id==t.source));i&&i.player.getRace()!=l.RaceDraenei&&(console.log(`Inferring player ${i.name} has race ${h.get(l.RaceDraenei)} from Heroic Presence aura event`),i.player.setRace(e,l.RaceDraenei),s=p.Alliance)}))}));const i=m(t.reportCastEvents.data,(e=>String(e.abilityGameID)));nt.forEach((t=>{(i[t.id]||[]).forEach((i=>{const r=a.find((e=>e.id==i.sourceID));r&&(console.log(`Inferring player ${r.name} has race ${h.get(t.race)} from ${t.name} event`),r.player.setRace(e,t.race),s=u[t.race])}))})),a.forEach((t=>{t.player.getRace()==l.RaceUnknown&&t.player.setRace(e,t.preset.defaultFactionRaces[s])}))}inferProfessions(e,t,a){const s=m(t.reportCastEvents.data,(e=>String(e.abilityGameID)));lt.forEach((e=>{(s[e.id]||[]).forEach((t=>{const s=a.find((e=>e.id==t.sourceID));s&&!s.inferredProfessions.includes(e.profession)&&(console.log(`Inferring player ${s.name} has profession ${g.get(e.profession)} from ${e.name} event`),s.inferredProfessions.push(e.profession))}))})),a.forEach((t=>{let a=f(t.inferredProfessions.concat(t.player.getGear().getProfessionRequirements()));0==a.length?a=[o.Engineering,o.Jewelcrafting]:1==a.length&&(a[0]!=o.Engineering?a.push(o.Engineering):a.push(o.Jewelcrafting)),t.player.setProfessions(e,a)}))}inferAssignments(e,t,a){const s=m(t.fightCastEvents.data,(e=>String(e.abilityGameID)));ot.forEach((t=>{(s[t.id]||[]).forEach((s=>{const i=a.find((e=>e.id==s.sourceID)),r=a.find((e=>e.id==s.targetID));if(i&&r&&i.player.getClass()==t.class){const a=t.applyFunc(i.player,r.toUnitReference());i.player.setSpecOptions(e,a),console.log(`Inferring player ${i.name} is targeting ${r.name} with ${t.name} from cast event`)}}))}))}inferPartyComposition(e,t,a){const s=(e,t,a)=>{(e.addPlayerInParty(t)||t.addPlayerInParty(e))&&console.log(`Inferring players ${e.name} and ${t.name} in same party from ${a} event`)},i=m(t.fightHealEvents.data,(e=>String(e.abilityGameID)));ct.forEach((e=>{(i[e.id]||[]).forEach((t=>{const i=a.find((e=>e.id==t.sourceID)),r=a.find((e=>e.id==t.targetID));i&&r&&s(i,r,e.name)}))})),dt.forEach((e=>{const t=i[e.id]||[],r=m(t,(e=>String(e.timestamp)+String(e.sourceID)));for(const[i,n]of Object.entries(r)){const t=n.map((e=>a.find((t=>t.id==e.targetID))));for(let a=0;a<t.length;a++)for(let i=0;i<t.length;i++)a!=i&&t[a]&&t[i]&&s(t[a],t[i],e.name)}})),t.combatantInfoEvents.data.forEach((e=>{const t=a.find((t=>t.id==e.sourceID));e.auras.filter((e=>28878==e.ability)).forEach((e=>{const i=a.find((t=>t.id==e.source));i&&t&&s(i,t,"Heroic Presence")}))}));let r=a.filter((e=>e.playersInParty.length>0)),n=0;for(;r.length>0;){let e=[r[0]].concat(r[0].playersInParty),t=0;for(;e.length!=t;)t=e.length,e=f(e.map((e=>[e].concat(e.playersInParty))).flat());const a=n;n++,e.forEach(((e,t)=>{e.raidIndex=5*a+t})),r=r.filter((t=>!e.includes(t)))}const l=[...Array(40).keys()];a.filter((e=>-1==e.raidIndex)).forEach((e=>{const t=l.find((e=>!a.some((t=>t.raidIndex==e))))??-1;if(-1==t)throw new Error("Invalid next idx");e.raidIndex=t}))}getEncounterProto(e){const t=e.fights[0],a=y.create({duration:(t.endTime-t.startTime)/1e3,targets:[]}),s=this.simUI.sim.db.getAllPresetEncounters().find((e=>e.path.includes(t.name)));return s&&s.targets.length&&s.targets.map((e=>e.target)).filter((e=>void 0!==e)).forEach((e=>a.targets.push(e))),0===a.targets.length&&a.targets.push(ie.defaultTargetProto()),a}getRaidProto(e){const t=S.create({parties:[...new Array(re).keys()].map((e=>I.create({players:[...new Array(5).keys()].map((()=>P.create()))})))});return e.forEach((e=>{const a=e.raidIndex%5,s=(e.raidIndex-a)/5,i=e.player.toProto();t.parties[s].players[a]=i,b(i).isTankSpec&&t.tanks.push(e.toUnitReference())})),t}}const ht=-1,mt=Math.min(...at.map((e=>Math.max(...Object.keys(e.defaultGear[p.Alliance]).map((e=>parseInt(e)))))));class ut extends T{constructor(e,t){super(e,"raid-picker-root"),this.currentDragPlayer=null,this.currentDragPlayerFromIndex=ht,this.currentDragType=1,this.currentDragParty=null,this.raidSimUI=t,this.raid=t.sim.raid;const a=document.createElement("div");a.classList.add("raid-controls"),this.rootElem.appendChild(a),this.newPlayerPicker=new St(this.rootElem,this),this.playerEditorModal=new yt,new le(a,this.raidSimUI.sim.raid,{id:"raid-picker-size",label:"Raid Size",labelTooltip:"Number of players participating in the sim.",values:[{name:"5",value:1},{name:"10",value:2},{name:"25",value:5}],changedEvent:e=>e.numActivePartiesChangeEmitter,getValue:e=>e.getNumActiveParties(),setValue:(e,t,a)=>{t.setNumActiveParties(e,a)}}),new le(a,this.newPlayerPicker,{id:"raid-picker-faction",label:"Default Faction",labelTooltip:"Default faction for newly-created players.",values:[{name:"Alliance",value:p.Alliance},{name:"Horde",value:p.Horde}],changedEvent:e=>this.raid.sim.factionChangeEmitter,getValue:e=>this.raid.sim.getFaction(),setValue:(e,t,a)=>{this.raid.sim.setFaction(e,a)}}),new le(a,this.newPlayerPicker,{id:"raid-picker-gear",label:"Default Gear",labelTooltip:"Newly-created players will start with approximate BIS gear from this phase.",values:[...Array(mt).keys()].map((e=>{const t=e+1;return{name:"Phase "+t,value:t}})),changedEvent:e=>this.raid.sim.phaseChangeEmitter,getValue:e=>this.raid.sim.getPhase(),setValue:(e,t,a)=>{this.raid.sim.setPhase(e,a)}});const s=document.createElement("div");s.classList.add("parties-container"),this.rootElem.appendChild(s),this.partyPickers=this.raid.getParties().map(((e,t)=>new gt(s,e,t,this)));const i=()=>{1==this.raidSimUI.sim.raid.getNumActiveParties()?(s.classList.remove("parties-container-small"),s.classList.remove("parties-container-full")):this.raidSimUI.sim.raid.getNumActiveParties()<=2?(s.classList.add("parties-container-small"),s.classList.remove("parties-container-full")):(s.classList.remove("parties-container-small"),s.classList.add("parties-container-full")),this.partyPickers.forEach((e=>{e.index<this.raidSimUI.sim.raid.getNumActiveParties()?(e.rootElem.classList.add("active"),e.rootElem.classList.remove("hide")):(e.rootElem.classList.remove("active"),e.rootElem.classList.add("hide"))}))};this.raidSimUI.sim.raid.numActivePartiesChangeEmitter.on(i),i(),this.rootElem.ondragend=e=>{this.clearDragPlayer(),this.clearDragParty()}}getCurrentFaction(){return this.raid.sim.getFaction()}getCurrentPhase(){return this.raid.sim.getPhase()}getPlayerPicker(e){return this.partyPickers[Math.floor(e/oe)].playerPickers[e%oe]}getPlayerPickers(){return[...new Array(25).keys()].map((e=>this.getPlayerPicker(e)))}setDragPlayer(e,t,a){if(this.clearDragPlayer(),this.currentDragPlayer=e,this.currentDragPlayerFromIndex=t,this.currentDragType=a,t!=ht){this.getPlayerPicker(t).rootElem.classList.add("dragfrom")}}clearDragPlayer(){if(this.currentDragPlayerFromIndex!=ht){this.getPlayerPicker(this.currentDragPlayerFromIndex).rootElem.classList.remove("dragfrom")}this.currentDragPlayer=null,this.currentDragPlayerFromIndex=ht,this.currentDragType=1}setDragParty(e){this.currentDragParty=e,e.rootElem.classList.add("dragfrom")}clearDragParty(){this.currentDragParty&&(this.currentDragParty.rootElem.classList.remove("dragfrom"),this.currentDragParty=null)}}class gt extends T{constructor(e,t,r,n){super(e,"party-picker-root"),this.party=t,this.index=r,this.raidPicker=n;const l=L(),o=L(),c=L();this.rootElem.setAttribute("draggable","true"),this.rootElem.replaceChildren(a(s,null,a("div",{className:"party-header"},a("label",{className:"party-label form-label"},"Group ",r+1),a("div",{className:"party-results"},a("span",{ref:o,className:"party-results-dps"}),a("span",{ref:c,className:"party-results-reference-delta"}))),a("div",{ref:l,className:"players-container"})));const d=l.value;this.playerPickers=[...Array(oe).keys()].map((e=>new ft(d,this,e)));const p=o.value,h=c.value;this.raidPicker.raidSimUI.referenceChangeEmitter.on((()=>{const e=this.raidPicker.raidSimUI.getCurrentData(),t=this.raidPicker.raidSimUI.getReferenceData(),a=e?.simResult.raidMetrics.parties[this.index]?.dps.avg||0,s=t?.simResult.raidMetrics.parties[this.index]?.dps.avg||0;if(0==a&&0==s)return p.textContent="",void(h.textContent="");p.textContent=`${a.toFixed(1)} DPS`,t?R(h,s,a,1,void 0,void 0,!0):h.textContent=""})),this.rootElem.ondragstart=e=>{e.target==this.rootElem&&(e.dataTransfer.dropEffect="move",e.dataTransfer.effectAllowed="all",this.raidPicker.setDragParty(this))};let m=0;this.rootElem.ondragenter=e=>{e.preventDefault(),this.raidPicker.currentDragParty&&(m++,this.rootElem.classList.add("dragto"))},this.rootElem.ondragleave=e=>{e.preventDefault(),this.raidPicker.currentDragParty&&(m--,m<=0&&this.rootElem.classList.remove("dragto"))},this.rootElem.ondragover=e=>{e.preventDefault()},this.rootElem.ondrop=e=>{if(!this.raidPicker.currentDragParty)return;e.preventDefault(),m=0,this.rootElem.classList.remove("dragto");const t=i.nextEventID();i.freezeAllAndDo((()=>{const e=this.raidPicker.currentDragParty;for(let a=0;a<oe;a++){const s=e.playerPickers[a],i=this.playerPickers[a],r=s.player,n=i.player;s.setPlayer(t,n,3),i.setPlayer(t,r,3)}})),this.raidPicker.clearDragParty()}}getClosestEmptyIndex(){const e=this.playerPickers.findIndex((e=>!e.player));return-1!==e?e:null}}class ft extends T{constructor(e,t,a){super(e,"player-picker-root"),this.labelElem=null,this.iconElem=null,this.nameElem=null,this.resultsElem=null,this.dpsResultElem=null,this.referenceDeltaElem=null,this.editButton=null,this.copyButton=null,this.deleteButton=null,this.abortController=new AbortController,this.signal=this.abortController.signal,this.index=a,this.raidIndex=t.index*oe+a,this.player=null,this.partyPicker=t,this.raidPicker=t.raidPicker,this.rootElem.classList.add("player"),this.partyPicker.party.compChangeEmitter.on((e=>{const t=this.partyPicker.party.getPlayer(this.index);t!=this.player&&this.setPlayer(e,t,0)})),this.raidPicker.raidSimUI.referenceChangeEmitter.on((()=>{const e=this.raidPicker.raidSimUI.getCurrentData(),t=this.raidPicker.raidSimUI.getReferenceData(),a=e?.simResult.getPlayerWithRaidIndex(this.raidIndex)?.dps.avg||0,s=t?.simResult.getPlayerWithRaidIndex(this.raidIndex)?.dps.avg||0;this.player&&(this.resultsElem?.classList.remove("hide"),this.dpsResultElem.textContent=`${a.toFixed(1)} DPS`,t&&R(this.referenceDeltaElem,s,a,1,void 0,void 0,!0))}));let s=0;this.rootElem.ondragenter=e=>{e.preventDefault(),this.raidPicker.currentDragParty||(s++,this.rootElem.classList.add("dragto"))},this.rootElem.ondragleave=e=>{e.preventDefault(),this.raidPicker.currentDragParty||(s--,s<=0&&this.rootElem.classList.remove("dragto"))},this.rootElem.ondragover=e=>e.preventDefault(),this.rootElem.ondrop=e=>{if(this.raidPicker.currentDragParty)return;const t=e.dataTransfer.getData("text/plain");e.preventDefault(),s=0,this.rootElem.classList.remove("dragto");const a=i.nextEventID();i.freezeAllAndDo((()=>{if(null==this.raidPicker.currentDragPlayer&&0==t.length)return;if(this.raidPicker.currentDragPlayerFromIndex==this.raidIndex)return void this.raidPicker.clearDragPlayer();const e=this.raidPicker.currentDragType;if(this.raidPicker.currentDragPlayerFromIndex!=ht){const t=this.raidPicker.getPlayerPicker(this.raidPicker.currentDragPlayerFromIndex);3==e?t.setPlayer(a,this.player,e):2==e&&t.setPlayer(a,null,e)}else if(null==this.raidPicker.currentDragPlayer){const e=atob(t),s=new Uint8Array(e.length);for(let t=0;t<s.length;t++)s[t]=e.charCodeAt(t);const i=U.fromBinary(s),r=new ne(b(i),this.raidPicker.raidSimUI.sim);r.fromProto(a,i),this.raidPicker.currentDragPlayer=r}4==e?this.setPlayer(a,this.raidPicker.currentDragPlayer.clone(a),e):this.setPlayer(a,this.raidPicker.currentDragPlayer,e),this.raidPicker.clearDragPlayer()}))},this.update()}setPlayer(e,t,a){t!=this.player&&(i.freezeAllAndDo((()=>{const s=this.partyPicker.getClosestEmptyIndex(),i=s&&s<this.index?s:this.index;if(this.player=t,t)this.partyPicker.party.setPlayer(e,i,t),1==a&&function(e,t,a){if(t.getPlayerSpec().isTankSpec){const s=a.getTanks(),i=s.findIndex((e=>null==a.getPlayerFromUnitReference(e)));-1==i?s.length<3&&a.setTanks(e,s.concat([t.makeUnitReference()])):(s[i]=t.makeUnitReference(),a.setTanks(e,s))}if(t.getSpec()==r.SpecBalanceDruid){const a=t.getSpecOptions();a.classOptions.innervateTarget=F(t.getRaidIndex()),t.setSpecOptions(e,a)}else if(t.getSpec()==r.SpecArcaneMage){const a=t.getSpecOptions();a.focusMagicTarget=F(t.getRaidIndex()),t.setSpecOptions(e,a)}else if(t.getSpec()==r.SpecUnholyDeathKnight){const a=t.getSpecOptions();a.unholyFrenzyTarget=F(t.getRaidIndex()),t.setSpecOptions(e,a)}}(e,t,this.raidPicker.raid);else{this.partyPicker.party.setPlayer(e,i,t);this.partyPicker.playerPickers.slice(this.index,5).filter((e=>e.player)).forEach(((t,a)=>{i<t.index&&this.partyPicker.party.setPlayer(e,i+a,t.player)})),this.partyPicker.party.compChangeEmitter.emit(e)}})),this.update())}update(){if(null==this.player)this.rootElem.className="player-picker-root player",this.rootElem.innerHTML="",this.labelElem=null,this.iconElem=null,this.nameElem=null,this.resultsElem=null,this.dpsResultElem=null,this.referenceDeltaElem=null;else{const e=n.getCssClass(this.player.getPlayerClass()),t=L(),i=L(),r=L(),l=L(),o=L(),c=L(),d=L(),p=L(),h=L();this.rootElem.className=`player-picker-root player bg-${e}-dampened`,this.rootElem.replaceChildren(a(s,null,a("div",{ref:t,className:"player-label"},a("img",{ref:i,className:"player-icon",src:this.player.getSpecIcon(),draggable:!0}),a("div",{className:"player-details"},a("input",{ref:r,className:O("player-name",`text-${e}`),type:"text",value:this.player.getName(),spellcheck:!1,maxLength:15}),a("div",{ref:l,className:"player-results hide"},a("span",{ref:o,className:"player-results-dps"}),a("span",{ref:c,className:"player-results-reference-delta"})))),a("div",{className:"player-options"},a("button",{ref:d,className:"player-edit",dataset:{tippyContent:"Click to Edit"}},a("i",{className:"fa fa-edit fa-lg"})),a("button",{ref:p,className:"player-copy link-warning",draggable:!0,dataset:{tippyContent:"Drag to Copy"}},a("i",{className:"fa fa-copy fa-lg"})),a("button",{ref:h,className:"player-delete link-danger",dataset:{tippyContent:"Click to Delete"}},a("i",{className:"fa fa-times fa-lg"}))))),this.labelElem=t.value,this.iconElem=i.value,this.nameElem=r.value,this.resultsElem=l.value,this.dpsResultElem=o.value,this.referenceDeltaElem=c.value,this.editButton=d.value,this.copyButton=p.value,this.deleteButton=h.value,this.bindPlayerEvents()}}bindPlayerEvents(){this.nameElem?.addEventListener("input",(()=>{this.player?.setName(i.nextEventID(),this.nameElem?.value||"")}),{signal:this.signal});this.nameElem?.addEventListener("mousedown",(()=>{this.partyPicker.rootElem.setAttribute("draggable","false")}),{signal:this.signal});this.nameElem?.addEventListener("mouseup",(()=>{this.partyPicker.rootElem.setAttribute("draggable","true")}),{signal:this.signal});this.nameElem?.addEventListener("focusout",(()=>{this.nameElem&&!this.nameElem.value&&(this.nameElem.value="Unnamed",this.player?.setName(i.nextEventID(),this.nameElem.value))}),{signal:this.signal});const t=(e,t)=>{if(null!==this.player){if(e.dataTransfer.dropEffect="move",e.dataTransfer.effectAllowed="all",this.player){const t=this.player.toProto(!0);e.dataTransfer.setData("text/plain",btoa(String.fromCharCode(...U.toBinary(t))))}this.raidPicker.setDragPlayer(this.player,this.raidIndex,t)}else e.preventDefault()},a=e(this.editButton),s=e(this.copyButton),r=e(this.deleteButton);this.iconElem?.addEventListener("dragstart",(e=>{e.dataTransfer.setDragImage(this.rootElem,20,20),t(e,3)}),{signal:this.signal});this.editButton?.addEventListener("click",(()=>{this.player&&this.raidPicker.playerEditorModal.openEditor(this.player)}),{signal:this.signal});this.copyButton?.addEventListener("dragstart",(e=>{e.dataTransfer.setDragImage(this.rootElem,20,20),t(e,4)}),{signal:this.signal});this.deleteButton?.addEventListener("click",(()=>{this.setPlayer(i.nextEventID(),null,0),this.dispose()}),{signal:this.signal}),this.addOnDisposeCallback((()=>{a?.destroy(),s?.destroy(),r?.destroy()}))}}class yt extends ce{constructor(){super(document.body,"player-editor-modal",{closeButton:{fixed:!0},header:!1,disposeOnClose:!1});const e=L(),t=a("div",{ref:e,className:"player-editor within-raid-sim"});this.rootElem.id="playerEditorModal",this.body.appendChild(t),this.playerEditorRoot=e.value}openEditor(e){this.setData(e),super.open()}setData(e){this.playerEditorRoot.innerHTML="",tt[e.getSpec()]?.(this.playerEditorRoot,e)}}class St extends T{constructor(t,s){super(t,"new-player-picker-root"),this.raidPicker=s,x(c).forEach((t=>{if(t==c.ClassUnknown)return;const s=at.filter((e=>D.fromProto(e.spec).classID==t));0!=s.length&&this.rootElem.appendChild(a("div",{className:O("class-presets-container",`bg-${n.getCssClass(n.fromProto(t))}-dampened`)},s.map((t=>{const a=D.fromProto(t.spec),s=L();return t.tooltip??D.getFullSpecName(a),a.getIcon("medium"),s.value&&(e(s.value),s.value.ondragstart=e=>{const s=i.nextEventID();i.freezeAllAndDo((()=>{const i=new Image;i.src=t.iconUrl??a.getIcon("medium"),e.dataTransfer.setDragImage(i,30,30),e.dataTransfer.setData("text/plain",""),e.dataTransfer.dropEffect="copy";const r=new ne(a,this.raidPicker.raid.sim);r.applySharedDefaults(s),r.setRace(s,t.defaultFactionRaces[this.raidPicker.getCurrentFaction()]),r.setTalentsString(s,t.talents.talentsString),r.setGlyphs(s,t.talents.glyphs||A.create()),r.setSpecOptions(s,t.specOptions),r.setConsumes(s,t.consumables),r.setName(s,t.defaultName??a.friendlyName),r.setProfession1(s,t.otherDefaults?.profession1||o.Engineering),r.setProfession2(s,t.otherDefaults?.profession2||o.Jewelcrafting),r.setDistanceFromTarget(s,t.otherDefaults?.distanceFromTarget||0),this.raidPicker.raid.sim.waitForInit().then((()=>{const e=Math.min(this.raidPicker.getCurrentPhase(),mt),a=t.defaultGear[this.raidPicker.getCurrentFaction()][e];r.setGear(s,this.raidPicker.raid.sim.db.lookupEquipmentSpec(a))})),this.raidPicker.setDragPlayer(r,ht,1)}))}),s.value}))))}))}}class It extends T{constructor(e,t){super(e,"raid-stats");const s=[];Ct.sections.forEach((e=>{const i=L(),r=a("div",{className:"raid-stats-section"},a("div",{className:"raid-stats-section-header"},a("label",{className:"raid-stats-section-label form-label"},e.label)),a("div",{ref:i,className:"raid-stats-section-content"}));this.rootElem.appendChild(r);const n=i.value;e.categories.forEach((e=>{s.push(new Pt(n,t,e))}))})),this.categories=s,t.changeEmitter.on((e=>this.categories.forEach((e=>e.update()))))}}class Pt extends T{constructor(t,s,i){super(t,"raid-stats-category-root"),this.raidSimUI=s,this.options=i;const r=L(),n=L();if(this.rootElem.appendChild(a("button",{ref:n,className:"raid-stats-category"},a("span",{ref:r,className:"raid-stats-category-counter"}),a("span",{className:"raid-stats-category-label"},i.label))),this.counterElem=r.value,this.tooltipElem=a("div",null,a("label",{className:"raid-stats-category-label"},i.label)),this.effects=i.effects.map((e=>new bt(this.tooltipElem,s,e))),1!=i.effects.length||i.effects[0].playerData?.class){const t=n.value;e(t,{theme:"raid-stats-category-tooltip",placement:"right",content:this.tooltipElem})}}update(){this.effects.forEach((e=>e.update()));const e=$(this.effects.map((e=>e.count)));this.counterElem.textContent=String(e);const t=this.rootElem.querySelector(".raid-stats-category");t?.classList[0===e?"remove":"add"]("active")}}class bt extends T{constructor(e,t,i){super(e,"raid-stats-effect"),this.raidSimUI=t,this.options=i,this.curPlayers=[],this.count=0;const r=L(),l=L(),o=L();if(this.rootElem.appendChild(a(s,null,a("span",{ref:r,className:"raid-stats-effect-counter"}),a("img",{ref:o,className:"raid-stats-effect-icon"}),a("span",{ref:l,className:"raid-stats-effect-label"},i.label))),this.counterElem=r.value,this.options.playerData?.class){const e=V(n.fromProto(this.options.playerData.class));l.value.classList.add(e)}i.actionId?i.actionId.fill().then((e=>o.value.src=e.iconUrl)):o.value.remove()}update(){this.options.playerData&&(this.curPlayers=this.raidSimUI.getActivePlayers().filter((e=>this.options.playerData.condition(e))));const e=this.options.raidData&&this.options.raidData(this.raidSimUI.sim.raid);this.count=this.curPlayers.length+(e?1:0),this.counterElem.textContent=String(this.count),0==this.count?this.rootElem.classList.remove("active"):this.rootElem.classList.add("active")}}function Dt(e,t){return e}function Et(e,t){return{class:e,condition:a=>a.isClass(e)&&(!t||t(a))}}function kt(e,t,a){return function(e,t,a,s){return{class:e,condition:a=>a.isClass(e)&&Dt(Boolean(a.getTalents()[t]))&&(!s||s(a))}}(e,t,0,a)}const Ct={sections:[{label:"Roles",categories:[{label:"Tanks",effects:[{label:"Tanks",playerData:{condition:e=>e.getPlayerSpec().isTankSpec}}]},{label:"Healers",effects:[{label:"Healers",playerData:{condition:e=>e.getPlayerSpec().isHealingSpec}}]},{label:"Melee",effects:[{label:"Melee",playerData:{condition:e=>e.getPlayerSpec().isMeleeDpsSpec}}]},{label:"Ranged",effects:[{label:"Ranged",playerData:{condition:e=>e.getPlayerSpec().isRangedDpsSpec}}]}]},{label:"Buffs",categories:[{label:"Bloodlust",effects:[{label:"Bloodlust",actionId:M.fromSpellId(2825),playerData:Et(c.ClassShaman)},{label:"Time Warp",actionId:M.fromSpellId(80353),playerData:Et(c.ClassMage)}]},{label:"Stats %",effects:[{label:"Mark of the Wild",actionId:M.fromSpellId(1126),playerData:Et(c.ClassDruid)},{label:"Blessing of Kings",actionId:M.fromSpellId(20217),playerData:Et(c.ClassPaladin)},{label:"Drums of the Burning Wild",actionId:M.fromItemId(63140),raidData:(Rt="drumsOfTheBurningWild",e=>Boolean(e.getBuffs()[Rt]))}]},{label:"Strength/Agility",effects:[{label:"Strength of Earth Totem",actionId:M.fromSpellId(8075),playerData:Et(c.ClassShaman,(e=>e.getSpecOptions().classOptions?.totems?.earth==B.StrengthOfEarthTotem))},{label:"Horn of Winter",actionId:M.fromSpellId(57330),playerData:Et(c.ClassDeathKnight)},{label:"Battle Shout",actionId:M.fromSpellId(6673),playerData:Et(c.ClassWarrior)}]},{label:"Armor",effects:[{label:"Devotion Aura",actionId:M.fromSpellId(465),playerData:Et(c.ClassPaladin)},{label:"Stoneskin Totem",actionId:M.fromSpellId(8071),playerData:Et(c.ClassShaman,(e=>e.getSpecOptions().classOptions?.totems?.earth==B.StoneskinTotem))}]},{label:"Attack Power %",effects:[{label:"Blessing of Might",actionId:M.fromSpellId(19740),playerData:Et(c.ClassPaladin)},{label:"Abominations Might",actionId:M.fromSpellId(53138),playerData:kt(c.ClassDeathKnight,"abominationsMight")},{label:"Unleashed Rage",actionId:M.fromSpellId(30808),playerData:kt(c.ClassShaman,"unleashedRage")},{label:"Trueshot Aura",actionId:M.fromSpellId(19506),playerData:kt(c.ClassHunter,"trueshotAura")}]},{label:"Spell Power",effects:[{label:"Demonic Pact",actionId:M.fromSpellId(47236),playerData:kt(c.ClassWarlock,"demonicPact")},{label:"Totemic Wrath",actionId:M.fromSpellId(77746),playerData:kt(c.ClassShaman,"totemicWrath")},{label:"Arcane Brilliance",actionId:M.fromSpellId(1459),playerData:Et(c.ClassMage)},{label:"Flametongue Totem",actionId:M.fromSpellId(8227),playerData:Et(c.ClassShaman,(e=>e.getSpecOptions().classOptions?.totems?.fire==W.FlametongueTotem))}]},{label:"+3% Damage",effects:[{label:"Communion",actionId:M.fromSpellId(31876),playerData:kt(c.ClassPaladin,"communion")},{label:"Arcane Tactics",actionId:M.fromSpellId(82930),playerData:kt(c.ClassMage,"arcaneTactics")},{label:"Ferocious Inspiration",actionId:M.fromSpellId(34460),playerData:kt(c.ClassHunter,"ferociousInspiration")}]},{label:"Melee Haste",effects:[{label:"Icy Talons",actionId:M.fromSpellId(55610),playerData:kt(c.ClassDeathKnight,"improvedIcyTalons")},{label:"Hunting Party",actionId:M.fromSpellId(53290),playerData:kt(c.ClassHunter,"huntingParty")},{label:"Windfury Totem",actionId:M.fromSpellId(8512),playerData:Et(c.ClassShaman,(e=>e.getSpecOptions().classOptions?.totems?.air==N.WindfuryTotem))}]},{label:"Spell Haste",effects:[{label:"Shadow Form",actionId:M.fromSpellId(15473),playerData:kt(c.ClassPriest,"shadowform")},{label:"Moonkin Form",actionId:M.fromSpellId(24858),playerData:kt(c.ClassDruid,"moonkinForm")},{label:"Wrath of Air Totem",actionId:M.fromSpellId(3738),playerData:Et(c.ClassShaman,(e=>e.getSpecOptions().classOptions?.totems?.air==N.WrathOfAirTotem))}]},{label:"+5% Crit",effects:[{label:"Leader of the Pack",actionId:M.fromSpellId(17007),playerData:kt(c.ClassDruid,"leaderOfThePack")},{label:"Elemental Oath",actionId:M.fromSpellId(51470),playerData:kt(c.ClassShaman,"elementalOath")},{label:"Honor Among Thieves",actionId:M.fromSpellId(51701),playerData:kt(c.ClassRogue,"honorAmongThieves")},{label:"Rampage",actionId:M.fromSpellId(29801),playerData:kt(c.ClassWarrior,"rampage")}]},{label:"Mana",effects:[{label:"Arcane Brilliance",actionId:M.fromSpellId(1459),playerData:Et(c.ClassMage)},{label:"Fel Intelligence",actionId:M.fromSpellId(54424),playerData:Et(c.ClassWarlock)}]},{label:"MP5",effects:[{label:"Blessing of Might",actionId:M.fromSpellId(19740),playerData:Et(c.ClassPaladin)},{label:"Fel Intelligence",actionId:M.fromSpellId(54424),playerData:Et(c.ClassWarlock)},{label:"Mana Spring Totem",actionId:M.fromSpellId(5675),playerData:Et(c.ClassShaman,(e=>e.getSpecOptions().classOptions?.totems?.water==H.ManaSpringTotem))}]},{label:"Replenishment",effects:[{label:"Vampiric Touch",actionId:M.fromSpellId(34914),playerData:kt(c.ClassPriest,"vampiricTouch")},{label:"Communion",actionId:M.fromSpellId(31876),playerData:kt(c.ClassPaladin,"communion")},{label:"Revitalize",actionId:M.fromSpellId(48544),playerData:kt(c.ClassDruid,"revitalize")},{label:"Soul Leach",actionId:M.fromSpellId(30295),playerData:kt(c.ClassWarlock,"soulLeech")},{label:"Enduring Winter",actionId:M.fromSpellId(86508),playerData:kt(c.ClassMage,"enduringWinter")}]},{label:"Stamina",effects:[{label:"Power Word Fortitude",actionId:M.fromSpellId(21562),playerData:Et(c.ClassPriest)},{label:"Blood Pact",actionId:M.fromSpellId(6307),playerData:Et(c.ClassWarlock)},{label:"Commanding Shout",actionId:M.fromSpellId(469),playerData:Et(c.ClassWarrior)}]},{label:"Resistances",effects:[{label:"Resistance Aura",actionId:M.fromSpellId(19891),playerData:Et(c.ClassPaladin)},{label:"Elemental Resistance Totem",actionId:M.fromSpellId(8184),playerData:Et(c.ClassShaman,(e=>e.getSpecOptions().classOptions?.totems?.water==H.ElementalResistanceTotem))},{label:"Aspect of the Wild",actionId:M.fromSpellId(20043),playerData:Et(c.ClassHunter)},{label:"Shadow Protection",actionId:M.fromSpellId(27683),playerData:Et(c.ClassPriest)},{label:"Blessing of Kings",actionId:M.fromSpellId(20217),playerData:Et(c.ClassPaladin)},{label:"Mark of the Wild",actionId:M.fromSpellId(1126),playerData:Et(c.ClassDruid)}]}]},{label:"External Buffs",categories:[{label:"Innervate",effects:[{label:"Innervate",actionId:M.fromSpellId(29166),playerData:Et(c.ClassDruid)}]},{label:"Power Infusion",effects:[{label:"Power Infusion",actionId:M.fromSpellId(10060),playerData:kt(c.ClassPriest,"powerInfusion")}]},{label:"Focus Magic",effects:[{label:"Focus Magic",actionId:M.fromSpellId(54648),playerData:kt(c.ClassMage,"focusMagic")}]},{label:"Tricks of the Trade",effects:[{label:"Tricks of the Trade",actionId:M.fromSpellId(57933),playerData:Et(c.ClassRogue)}]},{label:"Dark Intent",effects:[{label:"Dark Intent",actionId:M.fromSpellId(85759),playerData:Et(c.ClassWarlock)}]},{label:"Unholy Frenzy",effects:[{label:"Unholy Frenzy",actionId:M.fromSpellId(49016),playerData:kt(c.ClassDeathKnight,"unholyFrenzy")}]},{label:"Pain Suppression",effects:[{label:"Pain Suppression",actionId:M.fromSpellId(33206),playerData:kt(c.ClassPriest,"painSuppression")}]},{label:"Divine Guardian",effects:[{label:"Divine Guardian",actionId:M.fromSpellId(70940),playerData:kt(c.ClassPaladin,"divineGuardian")}]},{label:"Mana Tide",effects:[{label:"Mana Tide Totem",actionId:M.fromSpellId(16190),playerData:kt(c.ClassShaman,"manaTideTotem")}]}]},{label:"DPS Debuffs",categories:[{label:"-Armor %",effects:[{label:"Sunder Armor",actionId:M.fromSpellId(7386),playerData:Et(c.ClassWarrior)},{label:"Expose Armor",actionId:M.fromSpellId(8647),playerData:Et(c.ClassRogue)},{label:"Faerie Fire",actionId:M.fromSpellId(770),playerData:Et(c.ClassDruid)},{label:"Corosive Spit",actionId:M.fromSpellId(35387),playerData:Et(c.ClassHunter,(e=>e.getSpecOptions().classOptions?.petType==j.Serpent))}]},{label:"Phys Vuln",effects:[{label:"Blood Frenzy",actionId:M.fromSpellId(29859),playerData:kt(c.ClassWarrior,"bloodFrenzy")},{label:"Savage Combat",actionId:M.fromSpellId(58413),playerData:kt(c.ClassRogue,"savageCombat")},{label:"Brittle Bones",actionId:M.fromSpellId(81328),playerData:kt(c.ClassDeathKnight,"brittleBones")},{label:"Acid Spit",actionId:M.fromSpellId(55749),playerData:Et(c.ClassHunter,(e=>e.getSpecOptions().classOptions?.petType==j.Worm))}]},{label:"+Bleed %",effects:[{label:"Blood Frenzy",actionId:M.fromSpellId(29859),playerData:kt(c.ClassWarrior,"bloodFrenzy")},{label:"Mangle",actionId:M.fromSpellId(33878),playerData:Et(c.ClassDruid,(e=>e.isSpec(r.SpecFeralDruid)))},{label:"Hemorrhage",actionId:M.fromSpellId(16511),playerData:kt(c.ClassRogue,"hemorrhage")},{label:"Stampede",actionId:M.fromSpellId(57386),playerData:Et(c.ClassHunter,(e=>e.getSpecOptions().classOptions?.petType==j.Rhino))}]},{label:"Spell Crit",effects:[{label:"Critical Mass",actionId:M.fromSpellId(12873),playerData:kt(c.ClassMage,"criticalMass")},{label:"Shadow and Flame",actionId:M.fromSpellId(17801),playerData:kt(c.ClassWarlock,"shadowAndFlame")}]},{label:"Spell Dmg",effects:[{label:"Ebon Plaguebringer",actionId:M.fromSpellId(51160),playerData:kt(c.ClassDeathKnight,"ebonPlaguebringer")},{label:"Earth and Moon",actionId:M.fromSpellId(60433),playerData:(vt=r.SpecBalanceDruid,wt="earthAndMoon",function(e,t,a,s){return{class:D.fromProto(e).classID,condition:a=>a.isSpec(e)&&Dt(Boolean(a.getTalents()[t]))&&!s}}(vt,wt,0,Tt))},{label:"Curse of Elements",actionId:M.fromSpellId(1490),playerData:Et(c.ClassWarlock)},{label:"Master Poisoner",actionId:M.fromSpellId(58410),playerData:kt(c.ClassRogue,"masterPoisoner")},{label:"Fire Breath",actionId:M.fromSpellId(34889),playerData:Et(c.ClassHunter,(e=>e.getSpecOptions().classOptions?.petType==j.Dragonhawk))},{label:"Lightning Breath",actionId:M.fromSpellId(24844),playerData:Et(c.ClassHunter,(e=>e.getSpecOptions().classOptions?.petType==j.WindSerpent))}]}]},{label:"Mitigation Debuffs",categories:[{label:"-Dmg %",effects:[{label:"Vindication",actionId:M.fromSpellId(26016),playerData:kt(c.ClassPaladin,"vindication",(e=>[r.SpecRetributionPaladin,r.SpecProtectionPaladin].includes(e.getSpec())))},{label:"Curse of Weakness",actionId:M.fromSpellId(702),playerData:Et(c.ClassWarlock)},{label:"Demoralizing Roar",actionId:M.fromSpellId(99),playerData:Et(c.ClassDruid,(e=>e.isSpec(r.SpecFeralDruid)))},{label:"Scarlet Fever",actionId:M.fromSpellId(81130),playerData:kt(c.ClassDeathKnight,"scarletFever")},{label:"Demoralizing Shout",actionId:M.fromSpellId(1160),playerData:Et(c.ClassWarrior)}]},{label:"Atk Speed",effects:[{label:"Thunder Clap",actionId:M.fromSpellId(6343),playerData:Et(c.ClassWarrior)},{label:"Frost Fever",actionId:M.fromSpellId(59921),playerData:Et(c.ClassDeathKnight)},{label:"Judgements of the Just",actionId:M.fromSpellId(53696),playerData:kt(c.ClassPaladin,"judgementsOfTheJust")},{label:"Infected Wounds",actionId:M.fromSpellId(48484),playerData:kt(c.ClassDruid,"infectedWounds",(e=>[r.SpecFeralDruid,r.SpecFeralDruid].includes(e.getSpec())))},{label:"Earth Shock",actionId:M.fromSpellId(8042),playerData:Et(c.ClassShaman)},{label:"Dust Cloud",actionId:M.fromSpellId(50285),playerData:Et(c.ClassHunter,(e=>e.getSpecOptions().classOptions?.petType==j.Tallstrider))}]}]}]};var vt,wt,Tt,Rt;class Ut extends de{constructor(e,t){super(e,t,{identifier:"raid-tab",title:"Raid"}),this.simUI=t,this.rootElem.classList.add("active","show"),this.leftPanel=document.createElement("div"),this.leftPanel.classList.add("raid-tab-left","tab-panel-left"),this.rightPanel=document.createElement("div"),this.rightPanel.classList.add("raid-tab-right","tab-panel-right"),this.contentContainer.appendChild(this.leftPanel),this.contentContainer.appendChild(this.rightPanel),this.buildTabContent()}buildTabContent(){this.simUI.raidPicker=new ut(this.leftPanel,this.simUI),new It(this.leftPanel,this.simUI);const e=new pe(this.rightPanel,this.simUI,{label:"Raid",header:{title:"Saved Raid Groups"},storageKey:this.simUI.getSavedRaidStorageKey(),getData:()=>z.create({raid:this.simUI.sim.raid.toProto(),blessings:this.simUI.blessingsPicker?.getAssignments(),faction:this.simUI.sim.getFaction(),phase:this.simUI.sim.getPhase()}),setData:(e,t,a)=>{i.freezeAllAndDo((()=>{this.simUI.sim.raid.fromProto(e,a.raid||S.create()),this.simUI.blessingsPicker?.setAssignments(e,a.blessings||K.create()),a.faction&&this.simUI.sim.setFaction(e,a.faction),a.phase&&this.simUI.sim.setPhase(e,a.phase)}))},changeEmitters:[this.simUI.changeEmitter,this.simUI.sim.changeEmitter],equals:(e,t)=>z.equals(e,t),toJson:e=>z.toJson(e),fromJson:e=>z.fromJson(e)});this.simUI.sim.waitForInit().then((()=>{e.loadUserData()}))}}class Ot extends J{constructor(e,t,a,s){super(e,"raid-target-picker-root",a,s),this.rootElem.classList.add("dropdown"),this.config=s,this.raid=t,this.curPlayer=this.raid.getPlayerFromUnitReference(s.getValue(a)),this.curUnitReference=this.getInputValue(),this.rootElem.innerHTML='\n\t\t\t<button class="raid-target-picker-button" data-bs-toggle="dropdown"></button>\n\t\t\t<div class="dropdown-menu"></div>\n    ',this.buttonElem=this.rootElem.querySelector(".raid-target-picker-button"),this.dropdownElem=this.rootElem.querySelector(".dropdown-menu"),this.buttonElem.addEventListener("click",(e=>e.preventDefault())),this.currentOptions=[],this.updateOptions(i.nextEventID()),s.compChangeEmitter.on((e=>this.updateOptions(e))),this.init()}makeTargetOptions(){return[{player:null,isDropdown:!0},...this.raid.getPlayers().filter((e=>null!=e)).map((e=>({player:e,isDropdown:!0})))]}updateOptions(e){this.currentOptions=this.makeTargetOptions(),this.dropdownElem.innerHTML="",this.currentOptions.forEach((e=>this.dropdownElem.appendChild(this.makeOption(e))));const t=this.curUnitReference;this.curUnitReference=this.getInputValue(),v.equals(t,this.curUnitReference)?this.setInputValue(this.curUnitReference):this.inputChanged(e)}makeOption(e){const t=Ot.makeOptionElem(e);return t.addEventListener("click",(t=>{t.preventDefault(),this.curPlayer=e.player,this.curUnitReference=this.getInputValue(),this.inputChanged(i.nextEventID())})),t}getInputElem(){return this.buttonElem}getInputValue(){return this.curPlayer?this.curPlayer.makeUnitReference():G()}setInputValue(e){this.curUnitReference=v.clone(e),this.curPlayer=this.raid.getPlayerFromUnitReference(this.curUnitReference);const t=this.currentOptions.find((e=>e.player==this.curPlayer));t&&(this.buttonElem.innerHTML=Ot.makeOptionElem({player:t.player}).outerHTML)}static makeOptionElem(e){const t=e.player?n.getCssClass(e.player.getPlayerClass()):void 0;let s=a("div",{className:O("player",t&&`bg-${t}-dampened`)},a("div",{className:"player-label"},e.player&&a("img",{className:"player-icon",src:"${data.player.getSpecIcon()}",draggable:!1}),a("div",{className:"player-details"},a("span",{className:O("player-name",t&&`text-${t}`)},e.player?e.player.getName():"Unassigned"))));return e.isDropdown&&(s=a("button",{className:"dropdown-option"},s)),s}}class xt extends T{constructor(e,t){super(e,"assignments-picker-root"),this.changeEmitter=new i,this.raidSimUI=t,this.innervatesPicker=new Ft(this.rootElem,t),this.powerInfusionsPicker=new Lt(this.rootElem,t),this.tricksOfTheTradesPicker=new Mt(this.rootElem,t),this.unholyFrenzyPicker=new Bt(this.rootElem,t),this.focusMagicsPicker=new Wt(this.rootElem,t)}}class At extends T{constructor(e,t){super(e,"assigned-buff-picker-root"),this.changeEmitter=new i,this.raidSimUI=t,this.targetPickers=[],this.playersContainer=document.createElement("div"),this.playersContainer.classList.add("assigned-buff-container"),this.rootElem.appendChild(this.playersContainer),this.raidSimUI.changeEmitter.on((e=>this.update())),this.update()}update(){this.playersContainer.innerHTML=`\n\t\t\t<label class="assignmented-buff-label form-label">${this.getTitle()}</label>\n\t\t`;const e=this.getSourcePlayers();0==e.length?this.rootElem.classList.add("hide"):this.rootElem.classList.remove("hide"),this.targetPickers=e.map(((e,t)=>{const a=document.createElement("div");a.classList.add("assigned-buff-player","input-inline"),this.playersContainer.appendChild(a);const s=document.createElement("div");s.classList.add("raid-target-picker-root"),s.appendChild(Ot.makeOptionElem({player:e,isDropdown:!1})),a.appendChild(s);const i=document.createElement("i");i.classList.add("assigned-buff-arrow","fa","fa-arrow-right"),a.appendChild(i);const r=new Ot(a,this.raidSimUI.sim.raid,e,{extraCssClasses:["assigned-buff-target-picker"],noTargetLabel:"Unassigned",compChangeEmitter:this.raidSimUI.sim.raid.compChangeEmitter,changedEvent:e=>e.specOptionsChangeEmitter,getValue:e=>this.getPlayerValue(e),setValue:(e,t,a)=>this.setPlayerValue(e,t,a)}),n={player:e,targetPicker:r,targetPlayer:this.raidSimUI.sim.raid.getPlayerFromUnitReference(r.getInputValue())};return r.changeEmitter.on((e=>{n.targetPlayer=this.raidSimUI.sim.raid.getPlayerFromUnitReference(r.getInputValue())})),n}))}}class Ft extends At{getTitle(){return"Innervate"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter((e=>e.isClass(c.ClassDruid)))}getPlayerValue(e){return e.getSpecOptions().classOptions?.innervateTarget||G()}setPlayerValue(e,t,a){const s=t.getSpecOptions();s.classOptions.innervateTarget=a,t.setSpecOptions(e,s)}}class Lt extends At{getTitle(){return"Power Infusion"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter((e=>e.isSpec(r.SpecDisciplinePriest)&&e.getTalents().powerInfusion))}getPlayerValue(e){return e.getSpecOptions().powerInfusionTarget||G()}setPlayerValue(e,t,a){const s=t.getSpecOptions();s.powerInfusionTarget=a,t.setSpecOptions(e,s)}}class Mt extends At{getTitle(){return"Tricks of the Trade"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter((e=>e.isClass(c.ClassRogue)))}getPlayerValue(e){return e.getSpecOptions().classOptions.tricksOfTheTradeTarget||G()}setPlayerValue(e,t,a){const s=t.getSpecOptions();s.classOptions.tricksOfTheTradeTarget=a,t.setSpecOptions(e,s)}}class Bt extends At{getTitle(){return"Unholy Frenzy"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter((e=>e.isSpec(r.SpecUnholyDeathKnight)&&e.getTalents().unholyFrenzy))}getPlayerValue(e){return e.getSpecOptions().unholyFrenzyTarget||G()}setPlayerValue(e,t,a){const s=t.getSpecOptions();s.unholyFrenzyTarget=a,t.setSpecOptions(e,s)}}class Wt extends At{getTitle(){return"Focus Magic"}getSourcePlayers(){return this.raidSimUI.getActivePlayers().filter((e=>e.isSpec(r.SpecArcaneMage)))}getPlayerValue(e){return e.getSpecOptions().focusMagicTarget||G()}setPlayerValue(e,t,a){const s=t.getSpecOptions();s.focusMagicTarget=a,t.setSpecOptions(e,s)}}class Nt extends T{constructor(e,t){super(e,"blessings-picker-root"),this.changeEmitter=new i,this.pickers=[],this.simUI=t,this.assignments=K.clone(d(4));const a=n.naturalOrder.map((e=>Object.values(e.specs))).flat().filter((e=>st.includes(e.specID))),s=[...Array(4).keys()];a.map((e=>{const t=document.createElement("div");t.classList.add("blessings-picker-row"),this.rootElem.appendChild(t),t.append(this.buildSpecIcon(e));const a=document.createElement("div");return a.classList.add("blessings-picker-container"),t.appendChild(a),s.forEach((t=>{this.pickers[t]||this.pickers.push([]);const s=new he(a,this,{extraCssClasses:["blessing-picker"],numColumns:1,values:[{color:q.hexColor,value:_.BlessingUnknown},{actionId:M.fromSpellId(20217),value:_.BlessingOfKings},{actionId:M.fromSpellId(19740),value:_.BlessingOfMight}],equals:(e,t)=>e==t,zeroValue:_.BlessingUnknown,enableWhen:e=>{const a=Math.min(this.simUI.getClassCount(c.ClassPaladin),4);return t<a},changedEvent:e=>e.changeEmitter,getValue:a=>a.assignments.paladins[t]?.blessings[e.specID]||_.BlessingUnknown,setValue:(a,s,i)=>{s.assignments.paladins[t].blessings[e.specID]!=i&&(s.assignments.paladins[t].blessings[e.specID]=i,this.changeEmitter.emit(a))}});this.pickers[t].push(s)})),t})),this.updatePickers(),this.simUI.compChangeEmitter.on((e=>this.updatePickers()))}updatePickers(){for(let e=0;e<4;e++)this.pickers[e].forEach((e=>e.update()))}buildSpecIcon(t){const a=document.createElement("fragment");a.innerHTML=`\n\t\t\t<div class="blessings-picker-spec">\n\t\t\t\t<img\n\t\t\t\t\tsrc="${t.getIcon("medium")}"\n\t\t\t\t\tclass="blessings-spec-icon"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t`;const s=a.querySelector(".blessings-spec-icon");return e(s,{content:t.friendlyName}),a.children[0]}getAssignments(){return K.clone(this.assignments)}setAssignments(e,t){this.assignments=K.clone(t),this.changeEmitter.emit(e)}}class Ht extends T{constructor(e,t){super(e,"tanks-picker-root"),this.raidSimUI=t;const a=this.raidSimUI.sim.raid;for(let s=0;s<4;s++){const e=document.createElement("div");e.classList.add("tank-picker-row","input-inline"),this.rootElem.appendChild(e);const t=document.createElement("label");t.textContent=0==s?"Main Tank":`Tank ${s+1}`,t.classList.add("tank-picker-label","form-label"),e.appendChild(t),new Ot(e,a,a,{extraCssClasses:["tank-picker"],noTargetLabel:"Unassigned",compChangeEmitter:a.compChangeEmitter,changedEvent:e=>e.tanksChangeEmitter,getValue:e=>e.getTanks()[s]||G(),setValue:(e,t,a)=>{const i=t.getTanks();for(let r=0;r<s;r++)i[r]||i.push(G());i[s]=a,t.setTanks(e,i)}})}}}class jt extends de{constructor(e,t){super(e,t,{identifier:"raid-settings-tab",title:"Settings"}),this.column1=this.buildColumn(1,"raid-settings-col"),this.column2=this.buildColumn(2,"raid-settings-col"),this.column3=this.buildColumn(3,"raid-settings-col"),this.simUI=t,this.leftPanel=document.createElement("div"),this.leftPanel.classList.add("raid-settings-tab-left","tab-panel-left"),this.leftPanel.appendChild(this.column1),this.leftPanel.appendChild(this.column2),this.leftPanel.appendChild(this.column3),this.rightPanel=document.createElement("div"),this.rightPanel.classList.add("raid-settings-tab-right","tab-panel-right","within-raid-sim-hide"),this.contentContainer.appendChild(this.leftPanel),this.contentContainer.appendChild(this.rightPanel),this.buildTabContent()}buildTabContent(){this.buildEncounterSettings(),this.buildConsumesSettings(),this.buildTankSettings(),this.buildAssignmentSettings(),this.buildOtherSettings(),this.buildBlessingsPicker(),this.buildSavedDataPickers()}buildEncounterSettings(){const e=new me(this.column1,"encounter-settings",{header:{title:"Encounter"}});new ue(e.bodyElement,this.simUI.sim.encounter,{showExecuteProportion:!0},this.simUI)}buildConsumesSettings(){const e=new me(this.column1,"consumes-settings",{header:{title:"Consumables"}}),t=document.createElement("div");t.classList.add("consumes-container"),e.bodyElement.appendChild(t)}buildOtherSettings(){new me(this.column2,"other-settings",{header:{title:"Other"}})}buildTankSettings(){const e=new me(this.column2,"tanks-settings",{header:{title:"Tanks"}});new Ht(e.bodyElement,this.simUI)}buildAssignmentSettings(){const e=new me(this.column2,"assignments-settings",{header:{title:"External Buffs"}});new xt(e.bodyElement,this.simUI)}buildBlessingsPicker(){const e=new me(this.column3,"blessings-settings",{header:{title:"Blessings",tooltip:X}});this.simUI.blessingsPicker=new Nt(e.bodyElement,this.simUI),this.simUI.blessingsPicker.changeEmitter.on((e=>this.simUI.changeEmitter.emit(e)))}buildSavedDataPickers(){const e=new pe(this.rightPanel,this.simUI.sim.encounter,{label:"Encounter",header:{title:"Saved Encounters"},storageKey:this.simUI.getSavedEncounterStorageKey(),getData:e=>Q.create({encounter:e.toProto()}),setData:(e,t,a)=>t.fromProto(e,a.encounter),changeEmitters:[this.simUI.sim.encounter.changeEmitter],equals:(e,t)=>Q.equals(e,t),toJson:e=>Q.toJson(e),fromJson:e=>Q.fromJson(e)});this.simUI.sim.waitForInit().then((()=>{e.loadUserData()}))}makeBooleanRaidIconBuffInput(e,t,a){const s=this.simUI.sim.raid;return new ge(e,s,{actionId:t,states:2,changedEvent:e=>e.buffsChangeEmitter,getValue:e=>e.getBuffs()[a],setValue:(e,t,s)=>{const i=t.getBuffs();i[a]=s,t.setBuffs(e,i)}})}}const $t=[];new class extends fe{constructor(e,t){super(e,new ye({type:Z.SimTypeRaid}),{cssClass:"raid-sim-ui",cssScheme:"raid",spec:null,simStatus:Se,knownIssues:(t.knownIssues||[]).concat($t)}),this.raidSimResultsManager=null,this.raidPicker=null,this.blessingsPicker=null,this.compChangeEmitter=new i,this.changeEmitter=new i,this.referenceChangeEmitter=new i,this.config=t,this.sim.raid.compChangeEmitter.on((e=>this.compChangeEmitter.emit(e))),[this.compChangeEmitter,this.sim.changeEmitter].forEach((e=>e.on((e=>this.changeEmitter.emit(e))))),this.changeEmitter.on((()=>this.recomputeSettingsLayout())),this.sim.setModifyRaidProto((e=>this.modifyRaidProto(e))),this.sim.waitForInit().then((()=>this.loadSettings())),this.addSidebarComponents(),this.addTopbarComponents(),this.addRaidTab(),this.addSettingsTab(),this.addDetailedResultsTab()}loadSettings(){const e=i.nextEventID();i.freezeAllAndDo((()=>{let a=!1;const s=window.localStorage.getItem(this.getSettingsStorageKey());if(null!=s)try{const i=t.fromJsonString(s);this.fromProto(e,i),a=!0}catch(i){console.warn("Failed to parse saved settings: "+i)}a||this.applyDefaults(e),this.changeEmitter.on((e=>{const a=t.toJsonString(this.toProto());window.localStorage.setItem(this.getSettingsStorageKey(),a)}))}))}addSidebarComponents(){this.raidSimResultsManager=Y(this),this.raidSimResultsManager.changeEmitter.on((e=>this.referenceChangeEmitter.emit(e)))}addTopbarComponents(){this.simHeader.addImportLink("JSON",new et(this.rootElem,this)),this.simHeader.addImportLink("WCL",new pt(this.rootElem,this)),this.simHeader.addExportLink("JSON",new Ze(this.rootElem,this))}addRaidTab(){new Ut(this.simTabContentsContainer,this)}addSettingsTab(){new jt(this.simTabContentsContainer,this)}addDetailedResultsTab(){const e=a("div",{className:"detailed-results"});this.addTab("Results","detailed-results-tab",e),new ee(e,this,this.raidSimResultsManager)}recomputeSettingsLayout(){window.dispatchEvent(new Event("resize"))}modifyRaidProto(e){const t=this.getClassCount(c.ClassPaladin),a=this.blessingsPicker.getAssignments();st.forEach((s=>{const i=e.parties.map((e=>e.players.filter((e=>e.class!=c.ClassUnknown&&b(e)==s)))).flat();a.paladins.forEach(((a,r)=>{r>=t||(a.blessings[s]==_.BlessingOfKings?i.forEach((()=>e.buffs.blessingOfKings=!0)):a.blessings[s]==_.BlessingOfMight&&i.forEach((()=>e.buffs.blessingOfMight=!0)))}))}))}getCurrentData(){return this.raidSimResultsManager?this.raidSimResultsManager.getCurrentData():null}getReferenceData(){return this.raidSimResultsManager?this.raidSimResultsManager.getReferenceData():null}getActivePlayers(){return this.sim.raid.getActivePlayers()}getClassCount(e){return this.getActivePlayers().filter((t=>t.isClass(e))).length}applyDefaults(e){i.freezeAllAndDo((()=>{this.sim.raid.fromProto(e,S.create({numActiveParties:5})),this.sim.setPhase(e,1),this.sim.encounter.applyDefaults(e),this.sim.applyDefaults(e,!0,!0),this.sim.setShowDamageMetrics(e,!0)}))}toProto(){const e=this.sim.raid.getPlayers().filter((e=>e?.getClass()===c.ClassPaladin)).length;return t.create({settings:this.sim.toProto(),raid:this.sim.raid.toProto(!0),blessings:this.blessingsPicker?.getAssignments()??d(e),encounter:this.sim.encounter.toProto()})}toLink(){const e=this.toProto();e.settings=void 0;const a=t.toBinary(e),s=Ie.deflate(a,{to:"string"}),i=btoa(String.fromCharCode(...s)),r=new URL(window.location.href);return r.hash=i,r.toString()}fromProto(e,t){i.freezeAllAndDo((()=>{t.settings&&this.sim.fromProto(e,t.settings),this.sim.raid.fromProto(e,t.raid||S.create()),this.sim.encounter.fromProto(e,t.encounter||y.create()),this.blessingsPicker?.setAssignments(e,t.blessings||K.create())}))}clearRaid(e){this.sim.raid.clear(e)}getStorageKey(e){return"__cata_raid__"+e}getSavedRaidStorageKey(){return this.getStorageKey("__savedRaid__")}}(document.body,{});
