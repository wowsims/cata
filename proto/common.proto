syntax = "proto3";
package proto;

option go_package = "./proto";

enum Spec {
	SpecUnknown = 0;

	SpecBloodDeathKnight = 1;
	SpecFrostDeathKnight = 2;
	SpecUnholyDeathKnight = 3;

	SpecBalanceDruid = 4;
	SpecFeralDruid = 5;
	SpecRestorationDruid = 6;

	SpecBeastMasteryHunter = 7;
	SpecMarksmanshipHunter = 8;
	SpecSurvivalHunter = 9;

	SpecArcaneMage = 10;
	SpecFireMage = 11;
	SpecFrostMage = 12;

	SpecHolyPaladin = 13;
	SpecProtectionPaladin = 14;
	SpecRetributionPaladin = 15;

	SpecDisciplinePriest = 16;
	SpecHolyPriest = 17;
	SpecShadowPriest = 18;

	SpecAssassinationRogue = 19;
	SpecCombatRogue = 20;
	SpecSubtletyRogue = 21;

	SpecElementalShaman = 22;
	SpecEnhancementShaman = 23;
	SpecRestorationShaman = 24;

	SpecAfflictionWarlock = 25;
	SpecDemonologyWarlock = 26;
	SpecDestructionWarlock = 27;

	SpecArmsWarrior = 28;
	SpecFuryWarrior = 29;
	SpecProtectionWarrior = 30;
}

enum Race {
	RaceUnknown = 0;
	RaceBloodElf = 1;
	RaceDraenei = 2;
	RaceDwarf = 3;
	RaceGnome = 4;
	RaceHuman = 5;
	RaceNightElf = 6;
	RaceOrc = 7;
	RaceTauren = 8;
	RaceTroll = 9;
	RaceUndead = 10;
	RaceWorgen = 11;
	RaceGoblin = 12;
}

enum Faction {
	Unknown = 0;
	Alliance = 1;
	Horde = 2;
}

enum Class {
	ClassUnknown = 0;
	ClassDruid = 1;
	ClassHunter = 2;
	ClassMage = 3;
	ClassPaladin = 4;
	ClassPriest = 5;
	ClassRogue = 6;
	ClassShaman = 7;
	ClassWarlock = 8;
	ClassWarrior = 9;
	ClassDeathKnight = 10;
}

enum Profession {
	ProfessionUnknown = 0;
	Alchemy = 1;
	Blacksmithing = 2;
	Enchanting = 3;
	Engineering = 4;
	Herbalism = 5;
	Inscription = 6;
	Jewelcrafting = 7;
	Leatherworking = 8;
	Mining = 9;
	Skinning = 10;
	Tailoring = 11;
}

// Keep in sync with sim/core/stats/stats.go.
// NextIndex: 34;
enum Stat {
	StatStrength = 0;
	StatAgility = 1;
	StatStamina = 2;
	StatIntellect = 3;
	StatSpirit = 4;
	StatSpellPower = 5;
	StatMP5 = 6;
	StatSpellHit = 7;
	StatSpellCrit = 8;
	StatSpellHaste = 9;
	StatSpellPenetration = 10;
	StatAttackPower = 11;
	StatMeleeHit = 12;
	StatMeleeCrit = 13;
	StatMeleeHaste = 14;
	StatArmorPenetration = 15;
	StatExpertise = 16;
	StatMana = 17;
	StatArmor = 18;
	StatRangedAttackPower = 19;
	StatDefense = 20;
	StatBlock = 21;
	StatBlockValue = 22;
	StatDodge = 23;
	StatParry = 24;
	StatResilience = 25;
	StatHealth = 26;
	StatArcaneResistance = 27;
	StatFireResistance = 28;
	StatFrostResistance = 29;
	StatNatureResistance = 30;
	StatShadowResistance = 31;
	StatBonusArmor = 32;
	StatMastery = 33;

	// DO NOT add new stats here without discussing it first; new stats come with
	// a performance penalty.
}

// Not all pseudostats are included here; just the ones we want to pass
// between the UI and backend.
//
// It's also OK to include things here which aren't in the PseudoStats struct.
enum PseudoStat {
	PseudoStatMainHandDps = 0;
	PseudoStatOffHandDps = 1;
	PseudoStatRangedDps = 2;
	PseudoStatBlockValueMultiplier = 3;
	PseudoStatDodge = 4;
	PseudoStatParry = 5;
}

message UnitStats {
	repeated double stats = 1;
	repeated double pseudo_stats = 2;
}

message ReforgeStat {
    int32 id = 1;
	repeated Stat fromStat = 2;
	repeated Stat toStat = 3;
	double multiplier = 4;
}

enum ItemType {
	ItemTypeUnknown = 0;
	ItemTypeHead = 1;
	ItemTypeNeck = 2;
	ItemTypeShoulder = 3;
	ItemTypeBack = 4;
	ItemTypeChest = 5;
	ItemTypeWrist = 6;
	ItemTypeHands = 7;
	ItemTypeWaist = 8;
	ItemTypeLegs = 9;
	ItemTypeFeet = 10;
	ItemTypeFinger = 11;
	ItemTypeTrinket = 12;
	ItemTypeWeapon = 13;
	ItemTypeRanged = 14;
}

enum ArmorType {
	ArmorTypeUnknown = 0;
	ArmorTypeCloth = 1;
	ArmorTypeLeather = 2;
	ArmorTypeMail = 3;
	ArmorTypePlate = 4;
}

enum WeaponType {
	WeaponTypeUnknown = 0;
	WeaponTypeAxe = 1;
	WeaponTypeDagger = 2;
	WeaponTypeFist = 3;
	WeaponTypeMace = 4;
	WeaponTypeOffHand = 5;
	WeaponTypePolearm = 6;
	WeaponTypeShield = 7;
	WeaponTypeStaff = 8;
	WeaponTypeSword = 9;
}

enum HandType {
	HandTypeUnknown = 0;
	HandTypeMainHand = 1;
	HandTypeOneHand = 2;
	HandTypeOffHand = 3;
	HandTypeTwoHand = 4;
}

enum RangedWeaponType {
	RangedWeaponTypeUnknown = 0;
	RangedWeaponTypeBow = 1;
	RangedWeaponTypeCrossbow = 2;
	RangedWeaponTypeGun = 3;
	RangedWeaponTypeRelic = 4;
	RangedWeaponTypeThrown = 5;
	RangedWeaponTypeWand = 6;
}

// All slots on the gear menu where a single item can be worn.
enum ItemSlot {
	ItemSlotHead = 0;
	ItemSlotNeck = 1;
	ItemSlotShoulder = 2;
	ItemSlotBack = 3;
	ItemSlotChest = 4;
	ItemSlotWrist = 5;
	ItemSlotHands = 6;
	ItemSlotWaist = 7;
	ItemSlotLegs = 8;
	ItemSlotFeet = 9;
	ItemSlotFinger1 = 10;
	ItemSlotFinger2 = 11;
	ItemSlotTrinket1 = 12;
	ItemSlotTrinket2 = 13;
	ItemSlotMainHand = 14; // can be 1h or 2h
	ItemSlotOffHand = 15;
	ItemSlotRanged = 16;
}

enum ItemQuality {
	ItemQualityJunk = 0;
	ItemQualityCommon = 1;
	ItemQualityUncommon = 2;
	ItemQualityRare = 3;
	ItemQualityEpic = 4;
	ItemQualityLegendary = 5;
	ItemQualityArtifact = 6;
	ItemQualityHeirloom = 7;
}

enum GemColor {
	GemColorUnknown = 0;
	GemColorMeta = 1;
	GemColorRed = 2;
	GemColorBlue = 3;
	GemColorYellow = 4;
	GemColorGreen = 5;
	GemColorOrange = 6;
	GemColorPurple = 7;
	GemColorPrismatic = 8;
	GemColorCogwheel = 9;
}

enum SpellSchool {
	SpellSchoolPhysical = 0;
	SpellSchoolArcane = 1;
	SpellSchoolFire = 2;
	SpellSchoolFrost = 3;
	SpellSchoolHoly = 4;
	SpellSchoolNature = 5;
	SpellSchoolShadow = 6;
}

enum TristateEffect {
	TristateEffectMissing = 0;
	TristateEffectRegular = 1;
	TristateEffectImproved = 2;
}

enum Explosive {
	ExplosiveUnknown = 0;
	ExplosiveSaroniteBomb = 1;
	ExplosiveCobaltFragBomb = 2;
}

enum TinkerHands {
	TinkerHandsNone = 0;
	TinkerHandsSynapseSprings = 1;
	TinkerHandsTazikShocker = 2;
	TinkerHandsQuickflipDeflectionPlates = 3;
	TinkerHandsSpinalHealingInjector = 4;
	TinkerHandsZ50ManaGulper = 8;
}

enum Potions {
	UnknownPotion = 0;
	GolembloodPotion = 1; //58146
	PotionOfTheTolvir = 2; //58145
	PotionOfConcentration = 3; //57194
	VolcanicPotion = 4; //58091
	EarthenPotion = 5; //58090
	MightyRejuvenationPotion = 6; //57193
	MythicalHealingPotion = 7; //57191
	MythicalManaPotion = 8; // 57192
	PotionOfSpeed = 9;
	HastePotion = 10;
	MightyRagePotion = 11;
	RunicManaInjector = 12;
	RunicHealingInjector = 13;
}

enum Conjured {
	ConjuredUnknown = 0;
	ConjuredDarkRune = 1;
	ConjuredFlameCap = 2;
	ConjuredHealthstone = 5;
	ConjuredRogueThistleTea = 4;
}

enum Flask {
	FlaskUnknown = 0;
	FlaskOfTitanicStrength = 1;
	FlaskOfTheWinds = 2;
	FlaskOfSteelskin = 3;
	FlaskOfFlowingWater = 4;
	FlaskOfTheDraconicMind = 5;

	// Wotlk
	FlaskOfTheFrostWyrm = 6;
	FlaskOfEndlessRage = 7;
	FlaskOfPureMojo = 8;
	FlaskOfStoneblood = 9;
	LesserFlaskOfToughness = 10;
	LesserFlaskOfResistance = 11;
}

enum BattleElixir {
	BattleElixirUnknown = 0;
	ElixirOfTheMaster = 1;
	ElixirOfMightySpeed = 2;
	ElixirOfImpossibleAccuracy = 3;
	ElixirOfTheCobra = 4;
	ElixirOfTheNaga = 5;
	GhostElixir = 6;

	//Wotlk
	ElixirOfAccuracy = 7;
	ElixirOfArmorPiercing = 8;
	ElixirOfDeadlyStrikes = 9;
	ElixirOfExpertise = 10;
	ElixirOfLightningSpeed = 11;
	ElixirOfMightyAgility = 12;
	ElixirOfMightyStrength = 13;
	GurusElixir = 14;
	SpellpowerElixir = 15;
	WrathElixir = 16;

	// TBC
	ElixirOfDemonslaying = 17;
}

enum GuardianElixir {
	GuardianElixirUnknown = 0;
	ElixirOfDeepEarth = 1;
	PrismaticElixir = 2;

	//Wotlk
	ElixirOfMightyDefense = 3;
	ElixirOfMightyFortitude = 4;
	ElixirOfMightyMageblood = 5;
	ElixirOfMightyThoughts = 6;
	ElixirOfProtection = 7;
	ElixirOfSpirit = 8;
}

enum Food {
	FoodUnknown = 0;
	FoodFishFeast = 1;
	FoodGreatFeast = 2;
	FoodBlackenedDragonfin = 3;
	FoodHeartyRhino = 4;
	FoodMegaMammothMeal = 5;
	FoodSpicedWormBurger = 6;
	FoodRhinoliciousWormsteak = 7;
	FoodImperialMantaSteak = 8;
	FoodSnapperExtreme = 9;
	FoodMightyRhinoDogs = 10;
	FoodFirecrackerSalmon = 11;
	FoodCuttlesteak = 12;
	FoodDragonfinFilet = 13;

	// TBC Foods
	FoodBlackenedBasilisk = 14;
	FoodGrilledMudfish = 15;
	FoodRavagerDog = 16;
	FoodRoastedClefthoof = 17;
	FoodSkullfishSoup = 18;
	FoodSpicyHotTalbuk = 19;
	FoodFishermansFeast = 20;

	// Cata
	FoodSeafoodFeast = 21;
	FoodFortuneCookie = 22;
	FoodSeveredSagefish = 23;
	FoodBeerBasedCrocolisk = 24;
	FoodSkeweredEel = 25;
	FoodDeliciousSagefishTail = 26;
	FoodBasiliskLiverdog = 27;
	FoodBakedRockfish = 28;
	FoodCrocoliskAuGratin = 29;
	FoodGrilledDragon = 30;
	FoodLavascaleMinestrone = 31;
	FoodBlackbellySushi = 32;
	FoodMushroomSauceMudfish = 33;
}

enum PetFood {
	PetFoodUnknown = 0;
	PetFoodSpicedMammothTreats = 1;
	// TBC
	PetFoodKiblersBits = 2;
}

// Buffs that affect the entire raid.
// TODO: Reindex
message RaidBuffs {
	// +5% Base Stats and Spell Resistances
	bool mark_of_the_wild = 1;
	bool blessing_of_kings = 2;
	bool drums_of_the_burning_wild = 3;

	// +Spell Resistances
	bool elemental_resistance_totem = 4;
	bool resistance_aura = 5;
	bool shadow_protection = 6;
	bool aspect_of_the_wild = 7;

	// +Stamina
	bool power_word_fortitude = 8;
	bool commanding_shout = 9;
	bool blood_pact = 10;

	// +Stength and Agility
	bool battle_shout = 11;
	bool horn_of_winter = 12;
	bool strength_of_earth_totem = 13;

	// +10% Attack Power
	bool trueshot_aura = 14;
	bool unleashed_rage = 15;
	bool abominations_might = 16;
	bool blessing_of_might = 17;

	// +10% Melee Speed
	bool windfury_totem = 18;
	bool icy_talons = 19;
	bool hunting_party = 20;

	// +Mana
	bool arcane_brilliance = 21; // Also +Mp5
	bool fel_intelligence = 22; // Also +6% SP

	// +Mana Regen
	bool mana_spring_totem = 23;

	// +Spell Power
	bool demonic_pact = 24;
	bool totemic_wrath = 25;
	bool flametongue_totem = 26; // 6% SP

	// +5% Spell haste
	bool moonkin_form = 27;
	bool shadow_form = 28;
	bool wrath_of_air_totem = 29;

	// +3% All Damage
	bool arcane_tactics = 30;
	bool ferocious_inspiration = 31;
	bool communion = 32;

	// +5% All Crit
	bool leader_of_the_pack = 33;
	bool elemental_oath = 34;
	bool honor_among_thieves = 35;
	bool rampage = 36;
	bool terrifying_roar = 37;

	// Major Haste
	bool bloodlust = 38;
	bool heroism = 39;
	bool time_warp = 40;

	// Major Mana Replenishment
	int32 mana_tide_totem_count = 41;

	// +Armor
	bool devotion_aura = 42;
	bool stoneskin_totem = 43;

	// Miscellaneous
	bool retribution_aura = 44;
}

// Buffs that affect a single party.
message PartyBuffs {
}

// These are usually individual actions taken by other Characters.
message IndividualBuffs {
	// Only used in individual sims
	// as the class that provides these would cast them in raid sim

	// Major Mana Replenishment
	// How many of each of these buffs the player will be receiving.
	int32 innervate_count = 10;
	int32 hymn_of_hope_count = 7;

	// Minor Mana Replenishment
	bool vampiric_touch = 14;
	bool enduring_winter = 18;
	bool soul_leach = 16;
	bool revitalize = 17;
	bool communion = 100;

	// Other Buffs
	int32 power_infusion_count = 11;
	int32 unholy_frenzy_count = 12;
	int32 tricks_of_the_trade_count = 19;
	int32 divine_guardian_count = 23;
	int32 pain_suppression_count = 24;
	int32 hand_of_sacrifice_count = 25;
	int32 guardian_spirit_count = 26;
	bool focus_magic = 22;
	bool dark_intent = 27;
}

message Debuffs {
	// 8% spell damage
	bool curse_of_elements = 1;
	bool ebon_plaguebringer = 2;
	bool earth_and_moon = 3;
	bool master_poisoner = 4;
	bool fire_breath = 5;
	bool lightning_breath = 6;

	// 5% spell crit
	bool critical_mass = 7;
	bool shadow_and_flame = 8;

	// 30% bleed damage
	bool blood_frenzy = 9;
	bool hemorrhage = 10;
	bool mangle = 11;
	bool stampede = 12;

	// Major armor
	bool expose_armor = 13;
	bool sunder_armor = 14;
	bool faerie_fire = 15;
	bool corrosive_spit = 16;

	// 4% physical dmg
	bool savage_combat = 17;
	bool brittle_bones = 18;
	bool acid_spit = 19;

	// -dmg %
	bool curse_of_weakness = 20;
	bool demoralizing_roar = 21;
	bool demoralizing_shout = 22;
	bool vindication = 23;
	bool scarlet_fever = 24;
	bool demoralizing_screech = 25;

	// -attack speed
	bool thunder_clap = 26;
	bool frost_fever = 27;
	bool infected_wounds = 28;
	bool judgements_of_the_just = 29;
	bool dust_cloud = 30;
	bool earth_shock = 31;

	// health on hit
	bool judgement = 32;
}

message Consumes {
	Flask flask = 1;
	BattleElixir battle_elixir = 2;
	GuardianElixir guardian_elixir = 3;

	Food food = 6;
	PetFood pet_food = 7;

	int32 pet_scroll_of_agility = 8;
	int32 pet_scroll_of_strength = 9;

	Potions default_potion = 10;
	Potions prepop_potion = 11;
	Conjured default_conjured = 12;

	bool thermal_sapper = 15;
	bool explosive_decoy = 16;
	Explosive filler_explosive = 17;

	TinkerHands tinker_hands = 18;
}

enum MobType {
	MobTypeUnknown = 0;
	MobTypeBeast = 1;
	MobTypeDemon = 2;
	MobTypeDragonkin = 3;
	MobTypeElemental = 4;
	MobTypeGiant = 5;
	MobTypeHumanoid = 6;
	MobTypeMechanical = 7;
	MobTypeUndead = 8;
}

enum InputType {
	Bool = 0;
	Number = 1;
}

message TargetInput {
	InputType input_type = 1;
	string label = 2;
	string tooltip = 5;

	bool bool_value = 3;
	double number_value = 4;
}

message Target {
	// The in-game NPC ID.
	int32 id = 14;
	string name = 15;

	int32 level = 4;
	MobType mob_type = 3;
	repeated double stats = 5;

	// Auto attack parameters.
	double min_base_damage = 7;
	double damage_spread = 19; // replaces tight_enemy_damage
	double swing_speed = 8;
	bool dual_wield = 9;
	bool dual_wield_penalty = 10;
	bool parry_haste = 12;
	bool suppress_dodge = 16; // Sunwell Radiance
	SpellSchool spell_school = 13; // Allows elemental attacks.

	// Index in Raid.tanks indicating the player tanking this mob.
	// -1 or invalid index indicates not being tanked.
	int32 tank_index = 6;

	// Custom Target AI parameters
	repeated TargetInput target_inputs = 18;
}

message Encounter {
	double duration = 1;

	// Variation in the duration
	double duration_variation = 2;

	// The ratio of the encounter duration, between 0 and 1, for which the targets
	// will be in execute range (<= 20%) for the purposes of Warrior Execute, Mage Molten
	// Fury, etc.
	double execute_proportion_20 = 3;

	// Key for Affliction warlock Drain Soul
	double execute_proportion_25 = 7;

	// Same as execute_proportion but for 35%.
	double execute_proportion_35 = 4;

	// Same as execute_proportion but for > 90%.
	double execute_proportion_90 = 8;

	// If set, will use the targets health value instead of a duration for fight length.
	bool use_health = 5;

	// If type != Simple or Custom, then this may be empty.
	repeated Target targets = 6;

}

message PresetTarget {
	string path = 1;
	Target target = 2;
}
message PresetEncounter {
	string path = 1;
	repeated PresetTarget targets = 2;
}

message ItemRandomSuffix {
	int32 id = 1;
	string name = 2;
	repeated double stats = 3;
}

message ItemSpec {
	int32 id = 2;
	int32 random_suffix = 6;
	int32 enchant = 3;
	repeated int32 gems = 4;
	int32 reforging = 5; //reforging id
}

message EquipmentSpec {
	repeated ItemSpec items = 1;
}

message SimDatabase {
	repeated SimItem items = 1;
	repeated ItemRandomSuffix random_suffixes = 5;
	repeated SimEnchant enchants = 2;
	repeated SimGem gems = 3;
	repeated ReforgeStat reforge_stats = 6;
}

// Contains only the Item info needed by the sim.
message SimItem {
	int32 id = 1;
	string name = 2;

	ItemType type = 3;
	ArmorType armor_type = 4;
	WeaponType weapon_type = 5;
	HandType hand_type = 6;
	RangedWeaponType ranged_weapon_type = 7;

	repeated double stats = 8;
	repeated GemColor gem_sockets = 9;
	repeated double socketBonus = 10;

	double weapon_damage_min = 11;
	double weapon_damage_max = 12;
	double weapon_speed = 13;

	string set_name = 14;
	int32 rand_prop_points = 15;
}

// Extra enum for describing which items are eligible for an enchant, when
// ItemType alone is not enough.
enum EnchantType {
	EnchantTypeNormal = 0;
	EnchantTypeTwoHand = 1;
	EnchantTypeShield = 2;
	EnchantTypeKit = 3;
	EnchantTypeStaff = 4;
	EnchantTypeOffHand = 5;
}

// Contains only the Enchant info needed by the sim.
message SimEnchant {
	int32 effect_id = 1;
	repeated double stats = 2;
}

// Contains only the Gem info needed by the sim.
message SimGem {
	int32 id = 1;
	string name = 2;
	GemColor color = 3;
	repeated double stats = 4;
}

message UnitReference {
	enum Type {
		Unknown = 0;
		Player = 1;
		Target = 2;
		Pet = 3;
		Self = 4;
		CurrentTarget = 5;
		AllPlayers = 6;
		AllTargets = 7;
	}

	// The type of unit being referenced.
	Type type = 2;

	// Index of the player/target/pet/etc depending on value of type.
	int32 index = 3;

	// Reference to the owner, only used iff this is a pet.
	UnitReference owner = 4;
}

// ID for actions that aren't spells or items.
enum OtherAction {
	OtherActionNone = 0;
	OtherActionWait = 1;
	OtherActionManaRegen = 2;
	OtherActionEnergyRegen = 5;
	OtherActionFocusRegen = 6;
	OtherActionManaGain = 10; // For threat generated from mana gains.
	OtherActionRageGain = 11; // For threat generated from rage gains.
	OtherActionAttack = 3; // A white hit, can be main hand or off hand.
	OtherActionShoot = 4; // Default shoot action using a wand/bow/gun.
	OtherActionPet = 7; // Represents a grouping of all pet actions. Only used by the UI.
	OtherActionRefund = 8; // Refund of a resource like Energy or Rage, when the ability didn't land.
	OtherActionDamageTaken = 9; // Indicates damage taken; used for rage gen.
	OtherActionHealingModel = 12; // Indicates healing received from healing model.
	OtherActionBloodRuneGain = 13; // Indicates healing received from healing model.
	OtherActionFrostRuneGain  = 14; // Indicates healing received from healing model.
	OtherActionUnholyRuneGain  = 15; // Indicates healing received from healing model.
	OtherActionDeathRuneGain  = 16; // Indicates healing received from healing model.
	OtherActionPotion = 17; // Used by APL to generically refer to either the prepull or combat potion.
	OtherActionSolarEnergyGain = 18; // For balance druid solar energy
	OtherActionLunarEnergyGain = 19; // For balance druid lunar energy
}

message ActionID {
	// Identifies this action.
	oneof raw_id {
		int32 spell_id = 1;
		int32 item_id = 2;
		OtherAction other_id = 3;
	}

	// Distinguishes between different versions of the same action.
	// Currently the only use for this is Shaman Lightning Overload.
	int32 tag = 4;
}

message Glyphs {
	int32 prime1 = 1;
	int32 prime2 = 2;
	int32 prime3 = 3;
	int32 major1 = 4;
	int32 major2 = 5;
	int32 major3 = 6;
	int32 minor1 = 7;
	int32 minor2 = 8;
	int32 minor3 = 9;
}

// Custom options for a particular cooldown.
message Cooldown {
	// Identifies the cooldown to which these settings will apply.
	ActionID id = 1;

	// Fixed times at which to use this cooldown. Each value corresponds to a usage,
	// e.g. first value is the first usage, second value is the second usage.
	// Any usages after the specified timings will occur as soon as possible, subject
	// to the ShouldActivate() condition.
	repeated double timings = 2;
}

message Cooldowns {
	repeated Cooldown cooldowns = 1;

	// % HP threshold, below which defensive cooldowns can be used.
	double hp_percent_for_defensives = 2;
}

message HealingModel {
	// Healing per second to apply.
	double hps = 1;
	// How often healing is applied.
	double cadence_seconds = 2;
	// Variation in the cadence.
	double cadence_variation = 5;
	// % Inspiration buff uptime
	double inspiration_uptime = 3;
	// TMI burst window bin size
	int32 burst_window = 4;
}

message CustomRotation {
	repeated CustomSpell spells = 1;
}

message CustomSpell {
	// This should usually be a spec-specific enum value.
	int32 spell = 1;

	// Desired cast rate for this spell. Not used by most custom rotations, this is
	// primarily for healers.
	double casts_per_minute = 2;
}

message ItemSwap {
	ItemSpec mh_item = 1;
	ItemSpec oh_item = 2;
	ItemSpec ranged_item = 3;
}

message Duration {
	double ms = 1;
}

enum RotationType {
	UnknownType = 0;
	SingleTarget = 1;
	Aoe = 3;
	Custom = 2;
}
